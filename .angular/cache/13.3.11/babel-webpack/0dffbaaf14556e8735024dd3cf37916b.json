{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i2 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/clipboard';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, of, BehaviorSubject, Subject, EMPTY } from 'rxjs';\nimport { tap, delay, take, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\nconst SHARE_BUTTONS_CONFIG = new InjectionToken('shareButtonsConfig');\n\nclass IShareButton {}\n\nvar SharerMethod;\n\n(function (SharerMethod) {\n  SharerMethod[\"Anchor\"] = \"anchor\";\n  SharerMethod[\"Window\"] = \"window\";\n})(SharerMethod || (SharerMethod = {}));\n/**\n * Simple object check.\n */\n\n\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * Deep merge two objects.\n */\n\n\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n/** Returns a valid URL or falls back to current URL */\n\n\nfunction getValidUrl(url, fallbackUrl) {\n  if (url) {\n    const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n    if (r.test(url)) {\n      return url;\n    }\n\n    console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\n  }\n\n  return fallbackUrl;\n}\n\nfunction printPage() {\n  return new Observable(sub => document.defaultView.print());\n}\n\nfunction copyToClipboard({\n  params,\n  data,\n  clipboard,\n  updater\n}) {\n  return of(null).pipe(tap(() => {\n    clipboard.copy(params.url); // Disable copy button\n\n    updater.next({\n      icon: data.successIcon,\n      text: data.successText,\n      disabled: true\n    });\n  }), delay(data.delay), tap(() => updater.next({\n    icon: data.icon,\n    text: data.text,\n    disabled: false\n  })), take(1));\n} // Create message body that includes the sharing link used for Email, SMS and WhatsApp buttons\n\n\nconst linkInDescription = {\n  description: p => {\n    return p.description ? `${p.description}\\r\\n${p.url}` : p.url;\n  }\n};\nconst SHARE_BUTTONS = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    ariaLabel: 'Share on Facebook',\n    icon: ['fab', 'facebook-f'],\n    color: '#4267B2',\n    share: {\n      desktop: 'https://www.facebook.com/sharer/sharer.php?'\n    },\n    params: {\n      url: 'u'\n    }\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    ariaLabel: 'Share on Twitter',\n    icon: ['fab', 'twitter'],\n    color: '#00acee',\n    share: {\n      desktop: 'https://twitter.com/intent/tweet?'\n    },\n    params: {\n      url: 'url',\n      description: 'text',\n      tags: 'hashtags',\n      via: 'via'\n    }\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    ariaLabel: 'Share on LinkedIn',\n    icon: ['fab', 'linkedin-in'],\n    color: '#006fa6',\n    share: {\n      desktop: 'https://www.linkedin.com/shareArticle?'\n    },\n    params: {\n      url: 'url',\n      title: 'title',\n      description: 'summary'\n    }\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    ariaLabel: 'Share on Pinterest',\n    icon: ['fab', 'pinterest-p'],\n    color: '#BD091D',\n    share: {\n      desktop: 'https://pinterest.com/pin/create/button/?'\n    },\n    params: {\n      url: 'url',\n      description: 'description',\n      image: 'media'\n    }\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    ariaLabel: 'Share on Reddit',\n    icon: ['fab', 'reddit-alien'],\n    color: '#FF4006',\n    share: {\n      desktop: 'https://www.reddit.com/submit?'\n    },\n    params: {\n      url: 'url',\n      title: 'title'\n    }\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    ariaLabel: 'Share on Tumblr',\n    icon: ['fab', 'tumblr'],\n    color: '#36465D',\n    share: {\n      desktop: 'https://tumblr.com/widgets/share/tool?'\n    },\n    params: {\n      url: 'canonicalUrl',\n      description: 'caption',\n      tags: 'tags'\n    }\n  },\n  mix: {\n    type: 'mix',\n    text: 'Mix',\n    ariaLabel: 'Share on Mix',\n    icon: ['fab', 'mix'],\n    color: '#eb4924',\n    share: {\n      desktop: 'https://mix.com/add?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  viber: {\n    type: 'viber',\n    text: 'Viber',\n    ariaLabel: 'Share on Viber',\n    icon: ['fab', 'viber'],\n    color: '#665ca7',\n    share: {\n      android: 'viber://forward?',\n      ios: 'viber://forward?'\n    },\n    params: {\n      description: 'text'\n    },\n    paramsFunc: linkInDescription\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    ariaLabel: 'Share on VKontakte',\n    icon: ['fab', 'vk'],\n    color: '#4C75A3',\n    share: {\n      desktop: 'https://vk.com/share.php?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    ariaLabel: 'Share on Telegram',\n    icon: ['fab', 'telegram-plane'],\n    color: '#0088cc',\n    share: {\n      desktop: 'https://t.me/share/url?'\n    },\n    params: {\n      url: 'url',\n      description: 'text'\n    }\n  },\n  messenger: {\n    type: 'messenger',\n    text: 'Messenger',\n    ariaLabel: 'Share on Messenger',\n    icon: ['fab', 'facebook-messenger'],\n    color: '#0080FF',\n    share: {\n      android: 'fb-messenger://share/?',\n      ios: 'fb-messenger://share/?'\n    },\n    params: {\n      url: 'link'\n    }\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    ariaLabel: 'Share on WhatsApp',\n    icon: ['fab', 'whatsapp'],\n    color: '#25D366',\n    share: {\n      desktop: 'https://web.whatsapp.com/send?',\n      android: 'whatsapp://send?',\n      ios: 'https://api.whatsapp.com/send?'\n    },\n    params: {\n      description: 'text'\n    },\n    paramsFunc: linkInDescription\n  },\n  xing: {\n    type: 'xing',\n    text: 'Xing',\n    ariaLabel: 'Share on Xing',\n    icon: ['fab', 'xing'],\n    color: '#006567',\n    share: {\n      desktop: 'https://www.xing.com/spi/shares/new?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  line: {\n    type: 'line',\n    text: 'Line',\n    ariaLabel: 'Share on Line',\n    icon: ['fab', 'line'],\n    color: '#00b900',\n    share: {\n      desktop: 'https://social-plugins.line.me/lineit/share?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  sms: {\n    type: 'sms',\n    text: 'SMS',\n    ariaLabel: 'Share link via SMS',\n    icon: ['fas', 'sms'],\n    color: '#20c16c',\n    share: {\n      desktop: 'sms:?',\n      ios: 'sms:&'\n    },\n    params: {\n      description: 'body'\n    },\n    paramsFunc: linkInDescription\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    ariaLabel: 'Share link via email',\n    icon: ['fas', 'envelope'],\n    color: '#FF961C',\n    share: {\n      desktop: 'mailto:?'\n    },\n    params: {\n      title: 'subject',\n      description: 'body'\n    },\n    paramsFunc: linkInDescription\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    ariaLabel: 'Print page',\n    icon: ['fas', 'print'],\n    color: '#765AA2',\n    func: printPage\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    ariaLabel: 'Copy link',\n    icon: ['fas', 'link'],\n    color: '#607D8B',\n    data: {\n      text: 'Copy link',\n      icon: ['fas', 'link'],\n      successText: 'Copied',\n      successIcon: ['fas', 'check'],\n      delay: 2000\n    },\n    func: copyToClipboard\n  }\n};\n\nclass ShareService {\n  constructor(config, _document) {\n    this._document = _document;\n    /** Global config that applies on all share buttons in the app */\n\n    this.config = {\n      sharerMethod: SharerMethod.Anchor,\n      sharerTarget: '_blank',\n      windowObj: this._document.defaultView,\n      windowFuncName: 'open',\n      prop: SHARE_BUTTONS,\n      theme: 'default',\n      include: [],\n      exclude: [],\n      autoSetMeta: true,\n      windowWidth: 800,\n      windowHeight: 500,\n      moreButtonIcon: 'ellipsis-h',\n      lessButtonIcon: 'minus',\n      moreButtonAriaLabel: 'Show more share buttons',\n      lessButtonAriaLabel: 'Show less share buttons'\n    };\n    /** Stream that emits when config changes */\n\n    this.config$ = new BehaviorSubject(this.config);\n\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n  /**\n   * Share buttons properties, used to get the text, color and icon of each button.\n   */\n\n\n  get prop() {\n    return this.config.prop;\n  }\n\n  get windowSize() {\n    return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;\n  }\n\n  setConfig(config) {\n    this.config = mergeDeep(this.config, config);\n    this.config$.next(this.config);\n  }\n\n  addButton(name, props) {\n    this.setConfig({\n      prop: {\n        [name]: props\n      }\n    });\n  }\n\n}\n\nShareService.ɵfac = function ShareService_Factory(t) {\n  return new (t || ShareService)(i0.ɵɵinject(SHARE_BUTTONS_CONFIG, 8), i0.ɵɵinject(DOCUMENT));\n};\n\nShareService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ShareService,\n  factory: ShareService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShareService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SHARE_BUTTONS_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nclass ShareDirective {\n  constructor(_el, _meta, _platform, _clipboard, _share, _cd, _document) {\n    this._meta = _meta;\n    this._platform = _platform;\n    this._clipboard = _clipboard;\n    this._share = _share;\n    this._cd = _cd;\n    this._document = _document;\n    /** Stream that emits when button is destroyed */\n\n    this._destroyed = new Subject();\n    /** Stream that emit when share button need to be updated */\n\n    this._updater = new Subject();\n    /** Set meta tags from document head, useful when SEO is supported */\n\n    this.autoSetMeta = this._share.config.autoSetMeta;\n    /** Sharing link */\n\n    this.url = this._share.config.url;\n    /** Sets the title parameter */\n\n    this.title = this._share.config.title;\n    /** Sets the description parameter */\n\n    this.description = this._share.config.description;\n    /** Sets the image parameter for sharing on Pinterest */\n\n    this.image = this._share.config.image;\n    /** Sets the tags parameter for sharing on Twitter and Tumblr */\n\n    this.tags = this._share.config.tags;\n    /** Stream that emits when share dialog is opened */\n\n    this.opened = new EventEmitter();\n    /** Stream that emits when share dialog is closed */\n\n    this.closed = new EventEmitter();\n    this._el = _el.nativeElement;\n  }\n  /**\n   * Share the link\n   */\n\n\n  share() {\n    // Avoid SSR error\n    if (this._platform.isBrowser && this.shareButton) {\n      // Prepare sharer url params\n      const params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs(); // Prepare share button click\n\n      const click = this.shareButton.share ? this.open(params) : this.shareButton.func({\n        params,\n        data: this.shareButton.data,\n        clipboard: this._clipboard,\n        updater: this._updater\n      });\n      click.pipe(takeUntil(this._destroyed)).subscribe();\n    } else {\n      console.warn(`${this.text} button is not compatible on this Platform`);\n    }\n  }\n\n  ngOnInit() {\n    // This stream is mainly used to update the copy button text and icon when it is being clicked\n    this._updater.pipe(tap(data => {\n      this.icon = data.icon;\n      this.text = data.text;\n      this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';\n\n      this._cd.markForCheck();\n    }), takeUntil(this._destroyed)).subscribe();\n  }\n\n  ngOnChanges(changes) {\n    // Avoid SSR error\n    if (this._platform.isBrowser) {\n      // Create share button\n      if (this._shareButtonChanged(changes.shareButtonName)) {\n        this._createShareButton();\n      } // Prepare share url\n\n\n      if (this._urlChanged(changes.url)) {\n        this.url = getValidUrl(this.autoSetMeta ? this.url || this._getMetaTagContent('og:url') : this.url, this._document.defaultView.location.href);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n\n  _createShareButton() {\n    const button = this._share.config.prop[this.shareButtonName];\n\n    if (button) {\n      // Set share button properties\n      this.shareButton = button; // Remove previous button class\n\n      this._el.classList.remove(`sb-${this._buttonClass}`); // Add new button class\n\n\n      this._el.classList.add(`sb-${this.shareButtonName}`); // Set button css color variable\n\n\n      this._el.style.setProperty('--button-color', this.shareButton.color); // Keep a copy of the class for future replacement\n\n\n      this._buttonClass = this.shareButtonName;\n      this.color = this.shareButton.color;\n      this.text = this.shareButton.text;\n      this.icon = this.shareButton.icon; // Set aria-label attribute\n\n      this._el.setAttribute('aria-label', button.ariaLabel);\n    } else {\n      console.error(`[ShareButtons]: The share button '${this.shareButtonName}' does not exist!`);\n    }\n  }\n  /**\n   * Get meta tag content\n   */\n\n\n  _getMetaTagContent(key) {\n    const metaUsingProperty = this._meta.getTag(`property=\"${key}\"`);\n\n    if (metaUsingProperty) {\n      return metaUsingProperty.getAttribute('content');\n    }\n\n    const metaUsingName = this._meta.getTag(`name=\"${key}\"`);\n\n    if (metaUsingName) {\n      return metaUsingName.getAttribute('content');\n    }\n  }\n\n  _shareButtonChanged(change) {\n    return change && (change.firstChange || change.previousValue !== change.currentValue);\n  }\n\n  _urlChanged(change) {\n    return !this.url || change && change.previousValue !== change.currentValue;\n  }\n  /**\n   * Get share params from meta tags first and fallback to user inputs\n   */\n\n\n  getParamsFromMetaTags() {\n    return {\n      url: this.url,\n      title: this.title || this._getMetaTagContent('og:title'),\n      description: this.description || this._getMetaTagContent('og:description'),\n      image: this.image || this._getMetaTagContent('og:image'),\n      via: this._share.config.twitterAccount,\n      tags: this.tags\n    };\n  }\n  /**\n   * Get share params from user inputs\n   */\n\n\n  getParamsFromInputs() {\n    return {\n      url: this.url,\n      title: this.title,\n      description: this.description,\n      image: this.image,\n      tags: this.tags,\n      via: this._share.config.twitterAccount\n    };\n  }\n\n  open(params) {\n    // Set sharer link based on user's device\n    let sharerLink;\n\n    if (this._platform.IOS && this.shareButton.share.ios) {\n      sharerLink = this.shareButton.share.ios;\n    } else if (this._platform.ANDROID && this.shareButton.share.android) {\n      sharerLink = this.shareButton.share.android;\n    } else {\n      sharerLink = this.shareButton.share.desktop;\n    }\n\n    if (sharerLink) {\n      // Set sharer link params\n      this._finalUrl = sharerLink + this._serializeParams(params); // Log the sharer link in debug mode\n\n      if (this._share.config.debug) {\n        console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);\n      } // Open the share window\n      // There are two methods available for opening the share window:\n      // 1. Using a real anchor\n      // 2. Using window.open\n\n\n      const sharerMethod = this.shareButton.method || this._share.config.sharerMethod;\n      const sharerTarget = this.shareButton.target || this._share.config.sharerTarget;\n\n      switch (sharerMethod) {\n        case SharerMethod.Anchor:\n          const linkElement = this._document.createElement('a'); // Make it open in a new tab/window (depends on user's browser configuration)\n\n\n          linkElement.setAttribute('target', sharerTarget); // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n\n          linkElement.setAttribute('rel', 'noopener noreferrer');\n          linkElement.href = this._finalUrl;\n          linkElement.click();\n          linkElement.remove();\n          break;\n\n        case SharerMethod.Window:\n          // Open link using Window object\n          const openWindow = this._share.config.windowObj[this._share.config.windowFuncName];\n          const popUpWindow = openWindow(this._finalUrl, sharerTarget, this._share.windowSize); // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n\n          this._share.config.windowObj.opener = null; // Resolve when share dialog is closed\n\n          if (popUpWindow) {\n            return new Observable(sub => {\n              const pollTimer = this._document.defaultView.setInterval(() => {\n                if (popUpWindow.closed) {\n                  this._document.defaultView.clearInterval(pollTimer); // Emit when share windows is closed\n\n\n                  this.closed.emit(this.shareButtonName);\n                  sub.next();\n                  sub.complete();\n                }\n              }, 200);\n            });\n          }\n\n          break;\n      } // Emit when share window is opened\n\n\n      this.opened.emit(this.shareButtonName);\n    }\n\n    return EMPTY;\n  }\n\n  _serializeParams(params) {\n    return Object.entries(this.shareButton.params).map(([key, value]) => {\n      // Check if share button param has a map function\n      const paramFunc = this.shareButton.paramsFunc ? this.shareButton.paramsFunc[key] : null;\n\n      if (params[key] || paramFunc) {\n        const paramValue = paramFunc ? paramFunc(params) : params[key];\n        return `${value}=${encodeURIComponent(paramValue)}`;\n      }\n\n      return '';\n    }).filter(urlParam => urlParam !== '').join('&');\n  }\n\n}\n\nShareDirective.ɵfac = function ShareDirective_Factory(t) {\n  return new (t || ShareDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Meta), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i3.Clipboard), i0.ɵɵdirectiveInject(ShareService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nShareDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ShareDirective,\n  selectors: [[\"\", \"shareButton\", \"\"]],\n  hostBindings: function ShareDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function ShareDirective_click_HostBindingHandler() {\n        return ctx.share();\n      });\n    }\n  },\n  inputs: {\n    shareButtonName: [\"shareButton\", \"shareButtonName\"],\n    autoSetMeta: \"autoSetMeta\",\n    url: \"url\",\n    title: \"title\",\n    description: \"description\",\n    image: \"image\",\n    tags: \"tags\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\"\n  },\n  exportAs: [\"shareButton\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShareDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[shareButton]',\n      exportAs: 'shareButton'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Meta\n    }, {\n      type: i2.Platform\n    }, {\n      type: i3.Clipboard\n    }, {\n      type: ShareService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    shareButtonName: [{\n      type: Input,\n      args: ['shareButton']\n    }],\n    autoSetMeta: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    description: [{\n      type: Input\n    }],\n    image: [{\n      type: Input\n    }],\n    tags: [{\n      type: Input\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    share: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass ShareModule {\n  static withConfig(config) {\n    return {\n      ngModule: ShareModule,\n      providers: [{\n        provide: SHARE_BUTTONS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nShareModule.ɵfac = function ShareModule_Factory(t) {\n  return new (t || ShareModule)();\n};\n\nShareModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ShareModule\n});\nShareModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[PlatformModule, ClipboardModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ShareModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule, ClipboardModule],\n      declarations: [ShareDirective],\n      exports: [ShareDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { IShareButton, SHARE_BUTTONS, SHARE_BUTTONS_CONFIG, ShareDirective, ShareModule, ShareService, SharerMethod };","map":{"version":3,"sources":["C:/Users/Sunil/Desktop/Angular 13/ang13/node_modules/ngx-sharebuttons/fesm2015/ngx-sharebuttons.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","EventEmitter","Directive","Input","Output","HostListener","NgModule","i2","PlatformModule","i3","ClipboardModule","DOCUMENT","Observable","of","BehaviorSubject","Subject","EMPTY","tap","delay","take","takeUntil","i1","SHARE_BUTTONS_CONFIG","IShareButton","SharerMethod","isObject","item","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","getValidUrl","url","fallbackUrl","r","test","console","warn","printPage","sub","document","defaultView","print","copyToClipboard","params","data","clipboard","updater","pipe","copy","next","icon","successIcon","text","successText","disabled","linkInDescription","description","p","SHARE_BUTTONS","facebook","type","ariaLabel","color","share","desktop","twitter","tags","via","linkedin","title","pinterest","image","reddit","tumblr","mix","viber","android","ios","paramsFunc","vk","telegram","messenger","whatsapp","xing","line","sms","email","func","ShareService","constructor","config","_document","sharerMethod","Anchor","sharerTarget","windowObj","windowFuncName","prop","theme","include","exclude","autoSetMeta","windowWidth","windowHeight","moreButtonIcon","lessButtonIcon","moreButtonAriaLabel","lessButtonAriaLabel","config$","setConfig","windowSize","addButton","name","props","ɵfac","ɵprov","args","providedIn","undefined","decorators","ShareDirective","_el","_meta","_platform","_clipboard","_share","_cd","_destroyed","_updater","opened","closed","nativeElement","isBrowser","shareButton","getParamsFromMetaTags","getParamsFromInputs","click","open","subscribe","ngOnInit","style","pointerEvents","markForCheck","ngOnChanges","changes","_shareButtonChanged","shareButtonName","_createShareButton","_urlChanged","_getMetaTagContent","location","href","ngOnDestroy","complete","button","classList","remove","_buttonClass","add","setProperty","setAttribute","error","metaUsingProperty","getTag","getAttribute","metaUsingName","change","firstChange","previousValue","currentValue","twitterAccount","sharerLink","IOS","ANDROID","_finalUrl","_serializeParams","debug","log","method","linkElement","createElement","Window","openWindow","popUpWindow","opener","pollTimer","setInterval","clearInterval","emit","entries","map","value","paramFunc","paramValue","encodeURIComponent","filter","urlParam","join","ElementRef","Meta","Platform","Clipboard","ChangeDetectorRef","ɵdir","selector","exportAs","ShareModule","withConfig","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i2 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/clipboard';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, of, BehaviorSubject, Subject, EMPTY } from 'rxjs';\nimport { tap, delay, take, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\n\nconst SHARE_BUTTONS_CONFIG = new InjectionToken('shareButtonsConfig');\nclass IShareButton {\n}\nvar SharerMethod;\n(function (SharerMethod) {\n    SharerMethod[\"Anchor\"] = \"anchor\";\n    SharerMethod[\"Window\"] = \"window\";\n})(SharerMethod || (SharerMethod = {}));\n\n/**\n * Simple object check.\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * Deep merge two objects.\n */\nfunction mergeDeep(target, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n    const source = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, { [key]: {} });\n                }\n                mergeDeep(target[key], source[key]);\n            }\n            else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n    return mergeDeep(target, ...sources);\n}\n/** Returns a valid URL or falls back to current URL */\nfunction getValidUrl(url, fallbackUrl) {\n    if (url) {\n        const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n        if (r.test(url)) {\n            return url;\n        }\n        console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\n    }\n    return fallbackUrl;\n}\nfunction printPage() {\n    return new Observable((sub) => document.defaultView.print());\n}\nfunction copyToClipboard({ params, data, clipboard, updater }) {\n    return of(null).pipe(tap(() => {\n        clipboard.copy(params.url);\n        // Disable copy button\n        updater.next({ icon: data.successIcon, text: data.successText, disabled: true });\n    }), delay(data.delay), tap(() => updater.next({ icon: data.icon, text: data.text, disabled: false })), take(1));\n}\n\n// Create message body that includes the sharing link used for Email, SMS and WhatsApp buttons\nconst linkInDescription = {\n    description: (p) => {\n        return p.description ? `${p.description}\\r\\n${p.url}` : p.url;\n    }\n};\nconst SHARE_BUTTONS = {\n    facebook: {\n        type: 'facebook',\n        text: 'Facebook',\n        ariaLabel: 'Share on Facebook',\n        icon: ['fab', 'facebook-f'],\n        color: '#4267B2',\n        share: {\n            desktop: 'https://www.facebook.com/sharer/sharer.php?'\n        },\n        params: {\n            url: 'u'\n        }\n    },\n    twitter: {\n        type: 'twitter',\n        text: 'Twitter',\n        ariaLabel: 'Share on Twitter',\n        icon: ['fab', 'twitter'],\n        color: '#00acee',\n        share: {\n            desktop: 'https://twitter.com/intent/tweet?'\n        },\n        params: {\n            url: 'url',\n            description: 'text',\n            tags: 'hashtags',\n            via: 'via'\n        }\n    },\n    linkedin: {\n        type: 'linkedin',\n        text: 'LinkedIn',\n        ariaLabel: 'Share on LinkedIn',\n        icon: ['fab', 'linkedin-in'],\n        color: '#006fa6',\n        share: {\n            desktop: 'https://www.linkedin.com/shareArticle?'\n        },\n        params: {\n            url: 'url',\n            title: 'title',\n            description: 'summary'\n        }\n    },\n    pinterest: {\n        type: 'pinterest',\n        text: 'Pinterest',\n        ariaLabel: 'Share on Pinterest',\n        icon: ['fab', 'pinterest-p'],\n        color: '#BD091D',\n        share: {\n            desktop: 'https://pinterest.com/pin/create/button/?'\n        },\n        params: {\n            url: 'url',\n            description: 'description',\n            image: 'media'\n        }\n    },\n    reddit: {\n        type: 'reddit',\n        text: 'Reddit',\n        ariaLabel: 'Share on Reddit',\n        icon: ['fab', 'reddit-alien'],\n        color: '#FF4006',\n        share: {\n            desktop: 'https://www.reddit.com/submit?'\n        },\n        params: {\n            url: 'url',\n            title: 'title'\n        }\n    },\n    tumblr: {\n        type: 'tumblr',\n        text: 'Tumblr',\n        ariaLabel: 'Share on Tumblr',\n        icon: ['fab', 'tumblr'],\n        color: '#36465D',\n        share: {\n            desktop: 'https://tumblr.com/widgets/share/tool?'\n        },\n        params: {\n            url: 'canonicalUrl',\n            description: 'caption',\n            tags: 'tags'\n        }\n    },\n    mix: {\n        type: 'mix',\n        text: 'Mix',\n        ariaLabel: 'Share on Mix',\n        icon: ['fab', 'mix'],\n        color: '#eb4924',\n        share: {\n            desktop: 'https://mix.com/add?'\n        },\n        params: {\n            url: 'url'\n        }\n    },\n    viber: {\n        type: 'viber',\n        text: 'Viber',\n        ariaLabel: 'Share on Viber',\n        icon: ['fab', 'viber'],\n        color: '#665ca7',\n        share: {\n            android: 'viber://forward?',\n            ios: 'viber://forward?'\n        },\n        params: {\n            description: 'text'\n        },\n        paramsFunc: linkInDescription\n    },\n    vk: {\n        type: 'vk',\n        text: 'VKontakte',\n        ariaLabel: 'Share on VKontakte',\n        icon: ['fab', 'vk'],\n        color: '#4C75A3',\n        share: {\n            desktop: 'https://vk.com/share.php?'\n        },\n        params: {\n            url: 'url'\n        }\n    },\n    telegram: {\n        type: 'telegram',\n        text: 'Telegram',\n        ariaLabel: 'Share on Telegram',\n        icon: ['fab', 'telegram-plane'],\n        color: '#0088cc',\n        share: {\n            desktop: 'https://t.me/share/url?'\n        },\n        params: {\n            url: 'url',\n            description: 'text'\n        }\n    },\n    messenger: {\n        type: 'messenger',\n        text: 'Messenger',\n        ariaLabel: 'Share on Messenger',\n        icon: ['fab', 'facebook-messenger'],\n        color: '#0080FF',\n        share: {\n            android: 'fb-messenger://share/?',\n            ios: 'fb-messenger://share/?'\n        },\n        params: {\n            url: 'link'\n        }\n    },\n    whatsapp: {\n        type: 'whatsapp',\n        text: 'WhatsApp',\n        ariaLabel: 'Share on WhatsApp',\n        icon: ['fab', 'whatsapp'],\n        color: '#25D366',\n        share: {\n            desktop: 'https://web.whatsapp.com/send?',\n            android: 'whatsapp://send?',\n            ios: 'https://api.whatsapp.com/send?'\n        },\n        params: {\n            description: 'text'\n        },\n        paramsFunc: linkInDescription\n    },\n    xing: {\n        type: 'xing',\n        text: 'Xing',\n        ariaLabel: 'Share on Xing',\n        icon: ['fab', 'xing'],\n        color: '#006567',\n        share: {\n            desktop: 'https://www.xing.com/spi/shares/new?'\n        },\n        params: {\n            url: 'url'\n        }\n    },\n    line: {\n        type: 'line',\n        text: 'Line',\n        ariaLabel: 'Share on Line',\n        icon: ['fab', 'line'],\n        color: '#00b900',\n        share: {\n            desktop: 'https://social-plugins.line.me/lineit/share?'\n        },\n        params: {\n            url: 'url'\n        }\n    },\n    sms: {\n        type: 'sms',\n        text: 'SMS',\n        ariaLabel: 'Share link via SMS',\n        icon: ['fas', 'sms'],\n        color: '#20c16c',\n        share: {\n            desktop: 'sms:?',\n            ios: 'sms:&'\n        },\n        params: {\n            description: 'body'\n        },\n        paramsFunc: linkInDescription\n    },\n    email: {\n        type: 'email',\n        text: 'Email',\n        ariaLabel: 'Share link via email',\n        icon: ['fas', 'envelope'],\n        color: '#FF961C',\n        share: {\n            desktop: 'mailto:?'\n        },\n        params: {\n            title: 'subject',\n            description: 'body'\n        },\n        paramsFunc: linkInDescription\n    },\n    print: {\n        type: 'print',\n        text: 'Print',\n        ariaLabel: 'Print page',\n        icon: ['fas', 'print'],\n        color: '#765AA2',\n        func: printPage\n    },\n    copy: {\n        type: 'copy',\n        text: 'Copy link',\n        ariaLabel: 'Copy link',\n        icon: ['fas', 'link'],\n        color: '#607D8B',\n        data: {\n            text: 'Copy link',\n            icon: ['fas', 'link'],\n            successText: 'Copied',\n            successIcon: ['fas', 'check'],\n            delay: 2000\n        },\n        func: copyToClipboard\n    }\n};\n\nclass ShareService {\n    constructor(config, _document) {\n        this._document = _document;\n        /** Global config that applies on all share buttons in the app */\n        this.config = {\n            sharerMethod: SharerMethod.Anchor,\n            sharerTarget: '_blank',\n            windowObj: this._document.defaultView,\n            windowFuncName: 'open',\n            prop: SHARE_BUTTONS,\n            theme: 'default',\n            include: [],\n            exclude: [],\n            autoSetMeta: true,\n            windowWidth: 800,\n            windowHeight: 500,\n            moreButtonIcon: 'ellipsis-h',\n            lessButtonIcon: 'minus',\n            moreButtonAriaLabel: 'Show more share buttons',\n            lessButtonAriaLabel: 'Show less share buttons'\n        };\n        /** Stream that emits when config changes */\n        this.config$ = new BehaviorSubject(this.config);\n        if (config) {\n            this.setConfig(config);\n        }\n    }\n    /**\n     * Share buttons properties, used to get the text, color and icon of each button.\n     */\n    get prop() {\n        return this.config.prop;\n    }\n    get windowSize() {\n        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;\n    }\n    setConfig(config) {\n        this.config = mergeDeep(this.config, config);\n        this.config$.next(this.config);\n    }\n    addButton(name, props) {\n        this.setConfig({\n            prop: {\n                [name]: props\n            }\n        });\n    }\n}\nShareService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareService, deps: [{ token: SHARE_BUTTONS_CONFIG, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nShareService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [SHARE_BUTTONS_CONFIG]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\nclass ShareDirective {\n    constructor(_el, _meta, _platform, _clipboard, _share, _cd, _document) {\n        this._meta = _meta;\n        this._platform = _platform;\n        this._clipboard = _clipboard;\n        this._share = _share;\n        this._cd = _cd;\n        this._document = _document;\n        /** Stream that emits when button is destroyed */\n        this._destroyed = new Subject();\n        /** Stream that emit when share button need to be updated */\n        this._updater = new Subject();\n        /** Set meta tags from document head, useful when SEO is supported */\n        this.autoSetMeta = this._share.config.autoSetMeta;\n        /** Sharing link */\n        this.url = this._share.config.url;\n        /** Sets the title parameter */\n        this.title = this._share.config.title;\n        /** Sets the description parameter */\n        this.description = this._share.config.description;\n        /** Sets the image parameter for sharing on Pinterest */\n        this.image = this._share.config.image;\n        /** Sets the tags parameter for sharing on Twitter and Tumblr */\n        this.tags = this._share.config.tags;\n        /** Stream that emits when share dialog is opened */\n        this.opened = new EventEmitter();\n        /** Stream that emits when share dialog is closed */\n        this.closed = new EventEmitter();\n        this._el = _el.nativeElement;\n    }\n    /**\n     * Share the link\n     */\n    share() {\n        // Avoid SSR error\n        if (this._platform.isBrowser && this.shareButton) {\n            // Prepare sharer url params\n            const params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs();\n            // Prepare share button click\n            const click = this.shareButton.share ? this.open(params) : this.shareButton.func({\n                params,\n                data: this.shareButton.data,\n                clipboard: this._clipboard,\n                updater: this._updater\n            });\n            click.pipe(takeUntil(this._destroyed)).subscribe();\n        }\n        else {\n            console.warn(`${this.text} button is not compatible on this Platform`);\n        }\n    }\n    ngOnInit() {\n        // This stream is mainly used to update the copy button text and icon when it is being clicked\n        this._updater.pipe(tap((data) => {\n            this.icon = data.icon;\n            this.text = data.text;\n            this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';\n            this._cd.markForCheck();\n        }), takeUntil(this._destroyed)).subscribe();\n    }\n    ngOnChanges(changes) {\n        // Avoid SSR error\n        if (this._platform.isBrowser) {\n            // Create share button\n            if (this._shareButtonChanged(changes.shareButtonName)) {\n                this._createShareButton();\n            }\n            // Prepare share url\n            if (this._urlChanged(changes.url)) {\n                this.url = getValidUrl(this.autoSetMeta\n                    ? this.url || this._getMetaTagContent('og:url')\n                    : this.url, this._document.defaultView.location.href);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createShareButton() {\n        const button = this._share.config.prop[this.shareButtonName];\n        if (button) {\n            // Set share button properties\n            this.shareButton = button;\n            // Remove previous button class\n            this._el.classList.remove(`sb-${this._buttonClass}`);\n            // Add new button class\n            this._el.classList.add(`sb-${this.shareButtonName}`);\n            // Set button css color variable\n            this._el.style.setProperty('--button-color', this.shareButton.color);\n            // Keep a copy of the class for future replacement\n            this._buttonClass = this.shareButtonName;\n            this.color = this.shareButton.color;\n            this.text = this.shareButton.text;\n            this.icon = this.shareButton.icon;\n            // Set aria-label attribute\n            this._el.setAttribute('aria-label', button.ariaLabel);\n        }\n        else {\n            console.error(`[ShareButtons]: The share button '${this.shareButtonName}' does not exist!`);\n        }\n    }\n    /**\n     * Get meta tag content\n     */\n    _getMetaTagContent(key) {\n        const metaUsingProperty = this._meta.getTag(`property=\"${key}\"`);\n        if (metaUsingProperty) {\n            return metaUsingProperty.getAttribute('content');\n        }\n        const metaUsingName = this._meta.getTag(`name=\"${key}\"`);\n        if (metaUsingName) {\n            return metaUsingName.getAttribute('content');\n        }\n    }\n    _shareButtonChanged(change) {\n        return change && (change.firstChange || change.previousValue !== change.currentValue);\n    }\n    _urlChanged(change) {\n        return !this.url || (change && change.previousValue !== change.currentValue);\n    }\n    /**\n     * Get share params from meta tags first and fallback to user inputs\n     */\n    getParamsFromMetaTags() {\n        return {\n            url: this.url,\n            title: this.title || this._getMetaTagContent('og:title'),\n            description: this.description || this._getMetaTagContent('og:description'),\n            image: this.image || this._getMetaTagContent('og:image'),\n            via: this._share.config.twitterAccount,\n            tags: this.tags\n        };\n    }\n    /**\n     * Get share params from user inputs\n     */\n    getParamsFromInputs() {\n        return {\n            url: this.url,\n            title: this.title,\n            description: this.description,\n            image: this.image,\n            tags: this.tags,\n            via: this._share.config.twitterAccount,\n        };\n    }\n    open(params) {\n        // Set sharer link based on user's device\n        let sharerLink;\n        if (this._platform.IOS && this.shareButton.share.ios) {\n            sharerLink = this.shareButton.share.ios;\n        }\n        else if (this._platform.ANDROID && this.shareButton.share.android) {\n            sharerLink = this.shareButton.share.android;\n        }\n        else {\n            sharerLink = this.shareButton.share.desktop;\n        }\n        if (sharerLink) {\n            // Set sharer link params\n            this._finalUrl = sharerLink + this._serializeParams(params);\n            // Log the sharer link in debug mode\n            if (this._share.config.debug) {\n                console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);\n            }\n            // Open the share window\n            // There are two methods available for opening the share window:\n            // 1. Using a real anchor\n            // 2. Using window.open\n            const sharerMethod = this.shareButton.method || this._share.config.sharerMethod;\n            const sharerTarget = this.shareButton.target || this._share.config.sharerTarget;\n            switch (sharerMethod) {\n                case SharerMethod.Anchor:\n                    const linkElement = this._document.createElement('a');\n                    // Make it open in a new tab/window (depends on user's browser configuration)\n                    linkElement.setAttribute('target', sharerTarget);\n                    // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n                    linkElement.setAttribute('rel', 'noopener noreferrer');\n                    linkElement.href = this._finalUrl;\n                    linkElement.click();\n                    linkElement.remove();\n                    break;\n                case SharerMethod.Window:\n                    // Open link using Window object\n                    const openWindow = this._share.config.windowObj[this._share.config.windowFuncName];\n                    const popUpWindow = openWindow(this._finalUrl, sharerTarget, this._share.windowSize);\n                    // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n                    this._share.config.windowObj.opener = null;\n                    // Resolve when share dialog is closed\n                    if (popUpWindow) {\n                        return new Observable((sub) => {\n                            const pollTimer = this._document.defaultView.setInterval(() => {\n                                if (popUpWindow.closed) {\n                                    this._document.defaultView.clearInterval(pollTimer);\n                                    // Emit when share windows is closed\n                                    this.closed.emit(this.shareButtonName);\n                                    sub.next();\n                                    sub.complete();\n                                }\n                            }, 200);\n                        });\n                    }\n                    break;\n            }\n            // Emit when share window is opened\n            this.opened.emit(this.shareButtonName);\n        }\n        return EMPTY;\n    }\n    _serializeParams(params) {\n        return Object.entries(this.shareButton.params)\n            .map(([key, value]) => {\n            // Check if share button param has a map function\n            const paramFunc = this.shareButton.paramsFunc ? this.shareButton.paramsFunc[key] : null;\n            if (params[key] || paramFunc) {\n                const paramValue = paramFunc ? paramFunc(params) : params[key];\n                return `${value}=${encodeURIComponent(paramValue)}`;\n            }\n            return '';\n        })\n            .filter(urlParam => urlParam !== '')\n            .join('&');\n    }\n}\nShareDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareDirective, deps: [{ token: i0.ElementRef }, { token: i1.Meta }, { token: i2.Platform }, { token: i3.Clipboard }, { token: ShareService }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nShareDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: ShareDirective, selector: \"[shareButton]\", inputs: { shareButtonName: [\"shareButton\", \"shareButtonName\"], autoSetMeta: \"autoSetMeta\", url: \"url\", title: \"title\", description: \"description\", image: \"image\", tags: \"tags\" }, outputs: { opened: \"opened\", closed: \"closed\" }, host: { listeners: { \"click\": \"share()\" } }, exportAs: [\"shareButton\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[shareButton]',\n                    exportAs: 'shareButton'\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Meta }, { type: i2.Platform }, { type: i3.Clipboard }, { type: ShareService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { shareButtonName: [{\n                type: Input,\n                args: ['shareButton']\n            }], autoSetMeta: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], description: [{\n                type: Input\n            }], image: [{\n                type: Input\n            }], tags: [{\n                type: Input\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], share: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass ShareModule {\n    static withConfig(config) {\n        return {\n            ngModule: ShareModule,\n            providers: [\n                { provide: SHARE_BUTTONS_CONFIG, useValue: config }\n            ]\n        };\n    }\n}\nShareModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nShareModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareModule, declarations: [ShareDirective], imports: [PlatformModule,\n        ClipboardModule], exports: [ShareDirective] });\nShareModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareModule, imports: [[\n            PlatformModule,\n            ClipboardModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: ShareModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        PlatformModule,\n                        ClipboardModule\n                    ],\n                    declarations: [\n                        ShareDirective\n                    ],\n                    exports: [\n                        ShareDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IShareButton, SHARE_BUTTONS, SHARE_BUTTONS_CONFIG, ShareDirective, ShareModule, ShareService, SharerMethod };\n"]},"metadata":{},"sourceType":"module"}