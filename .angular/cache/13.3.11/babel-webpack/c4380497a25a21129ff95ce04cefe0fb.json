{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { getEditorNamespace } from 'ckeditor4-integrations-common';\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\nfunction CKEditorComponent_ng_template_0_Template(rf, ctx) {}\n\nclass CKEditorComponent {\n  constructor(elementRef, ngZone) {\n    this.elementRef = elementRef;\n    this.ngZone = ngZone;\n    /**\n     * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n     *\n     * Defaults to 'https://cdn.ckeditor.com/4.24.0-lts/standard-all/ckeditor.js'\n     */\n\n    this.editorUrl = 'https://cdn.ckeditor.com/4.24.0-lts/standard-all/ckeditor.js';\n    /**\n     * Tag name of the editor component.\n     *\n     * The default tag is `textarea`.\n     */\n\n    this.tagName = 'textarea';\n    /**\n     * The type of the editor interface.\n     *\n     * By default editor interface will be initialized as `classic` editor.\n     * You can also choose to create an editor with `inline` interface type instead.\n     *\n     * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n     * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n     * to learn more.\n     */\n\n    this.type = \"classic\"\n    /* CLASSIC */\n    ;\n    /**\n     * Fired when the CKEDITOR https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR.html namespace\n     * is loaded. It only triggers once, no matter how many CKEditor 4 components are initialised.\n     * Can be used for convenient changes in the namespace, e.g. for adding external plugins.\n     */\n\n    this.namespaceLoaded = new EventEmitter();\n    /**\n     * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n     * event.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Fires when the editor data is loaded, e.g. after calling setData()\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\n     * editor's method. It corresponds with the `editor#dataReady`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\n     */\n\n    this.dataReady = new EventEmitter();\n    /**\n     * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n     * event. For performance reasons this event may be called even when data didn't really changed.\n     * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\n     * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n     * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n     *\n     * See more: https://angular.io/guide/template-syntax#two-way-binding---\n     */\n\n    this.dataChange = new EventEmitter();\n    /**\n     * Fires when the native dragStart event occurs. It corresponds with the `editor#dragstart`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragstart\n     * event.\n     */\n\n    this.dragStart = new EventEmitter();\n    /**\n     * Fires when the native dragEnd event occurs. It corresponds with the `editor#dragend`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragend\n     * event.\n     */\n\n    this.dragEnd = new EventEmitter();\n    /**\n     * Fires when the native drop event occurs. It corresponds with the `editor#drop`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-drop\n     * event.\n     */\n\n    this.drop = new EventEmitter();\n    /**\n     * Fires when the file loader response is received. It corresponds with the `editor#fileUploadResponse`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadResponse\n     * event.\n     */\n\n    this.fileUploadResponse = new EventEmitter();\n    /**\n     * Fires when the file loader should send XHR. It corresponds with the `editor#fileUploadRequest`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadRequest\n     * event.\n     */\n\n    this.fileUploadRequest = new EventEmitter();\n    /**\n     * Fires when the editing area of the editor is focused. It corresponds with the `editor#focus`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n     * event.\n     */\n\n    this.focus = new EventEmitter();\n    /**\n     * Fires after the user initiated a paste action, but before the data is inserted.\n     * It corresponds with the `editor#paste`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-paste\n     * event.\n     */\n\n    this.paste = new EventEmitter();\n    /**\n     * Fires after the `paste` event if content was modified. It corresponds with the `editor#afterPaste`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-afterPaste\n     * event.\n     */\n\n    this.afterPaste = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n     * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n     * event.\n     */\n\n    this.blur = new EventEmitter();\n    /**\n     * If the component is read–only before the editor instance is created, it remembers that state,\n     * so the editor can become read–only once it is ready.\n     */\n\n    this._readOnly = null;\n    this._data = null;\n    this._destroyed = false;\n  }\n  /**\n   * Keeps track of the editor's data.\n   *\n   * It's also decorated as an input which is useful when not using the ngModel.\n   *\n   * See https://angular.io/api/forms/NgModel to learn more.\n   */\n\n\n  set data(data) {\n    if (data === this._data) {\n      return;\n    }\n\n    if (this.instance) {\n      this.instance.setData(data); // Data may be changed by ACF.\n\n      this._data = this.instance.getData();\n      return;\n    }\n\n    this._data = data;\n  }\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * When set to `true`, the editor becomes read-only.\n   *\n   * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n   * to learn more.\n   */\n\n\n  set readOnly(isReadOnly) {\n    if (this.instance) {\n      this.instance.setReadOnly(isReadOnly);\n      return;\n    } // Delay setting read-only state until editor initialization.\n\n\n    this._readOnly = isReadOnly;\n  }\n\n  get readOnly() {\n    if (this.instance) {\n      return this.instance.readOnly;\n    }\n\n    return this._readOnly;\n  }\n\n  ngAfterViewInit() {\n    getEditorNamespace(this.editorUrl, namespace => {\n      this.namespaceLoaded.emit(namespace);\n    }).then(() => {\n      // Check if component instance was destroyed before `ngAfterViewInit` call (#110).\n      // Here, `this.instance` is still not initialized and so additional flag is needed.\n      if (this._destroyed) {\n        return;\n      }\n\n      this.ngZone.runOutsideAngular(this.createEditor.bind(this));\n    }).catch(window.console.error);\n  }\n\n  ngOnDestroy() {\n    this._destroyed = true;\n    this.ngZone.runOutsideAngular(() => {\n      if (this.instance) {\n        this.instance.destroy();\n        this.instance = null;\n      }\n    });\n  }\n\n  writeValue(value) {\n    this.data = value;\n  }\n\n  registerOnChange(callback) {\n    this.onChange = callback;\n  }\n\n  registerOnTouched(callback) {\n    this.onTouched = callback;\n  }\n\n  createEditor() {\n    var _a, _b;\n\n    const element = document.createElement(this.tagName);\n    this.elementRef.nativeElement.appendChild(element);\n    const userInstanceReadyCallback = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.on) === null || _b === void 0 ? void 0 : _b.instanceReady;\n    const defaultConfig = {\n      delayIfDetached: true\n    };\n    const config = Object.assign(Object.assign({}, defaultConfig), this.config);\n\n    if (typeof config.on === 'undefined') {\n      config.on = {};\n    }\n\n    config.on.instanceReady = evt => {\n      const editor = evt.editor;\n      this.instance = editor; // Read only state may change during instance initialization.\n\n      this.readOnly = this._readOnly !== null ? this._readOnly : this.instance.readOnly;\n      this.subscribe(this.instance);\n      const undo = editor.undoManager;\n\n      if (this.data !== null) {\n        undo && undo.lock();\n        editor.setData(this.data, {\n          callback: () => {\n            // Locking undoManager prevents 'change' event.\n            // Trigger it manually to updated bound data.\n            if (this.data !== editor.getData()) {\n              undo ? editor.fire('change') : editor.fire('dataReady');\n            }\n\n            undo && undo.unlock();\n            this.ngZone.run(() => {\n              if (typeof userInstanceReadyCallback === 'function') {\n                userInstanceReadyCallback(evt);\n              }\n\n              this.ready.emit(evt);\n            });\n          }\n        });\n      } else {\n        this.ngZone.run(() => {\n          if (typeof userInstanceReadyCallback === 'function') {\n            userInstanceReadyCallback(evt);\n          }\n\n          this.ready.emit(evt);\n        });\n      }\n    };\n\n    if (this.type === \"inline\"\n    /* INLINE */\n    ) {\n      CKEDITOR.inline(element, config);\n    } else {\n      CKEDITOR.replace(element, config);\n    }\n  }\n\n  subscribe(editor) {\n    editor.on('focus', evt => {\n      this.ngZone.run(() => {\n        this.focus.emit(evt);\n      });\n    });\n    editor.on('paste', evt => {\n      this.ngZone.run(() => {\n        this.paste.emit(evt);\n      });\n    });\n    editor.on('afterPaste', evt => {\n      this.ngZone.run(() => {\n        this.afterPaste.emit(evt);\n      });\n    });\n    editor.on('dragend', evt => {\n      this.ngZone.run(() => {\n        this.dragEnd.emit(evt);\n      });\n    });\n    editor.on('dragstart', evt => {\n      this.ngZone.run(() => {\n        this.dragStart.emit(evt);\n      });\n    });\n    editor.on('drop', evt => {\n      this.ngZone.run(() => {\n        this.drop.emit(evt);\n      });\n    });\n    editor.on('fileUploadRequest', evt => {\n      this.ngZone.run(() => {\n        this.fileUploadRequest.emit(evt);\n      });\n    });\n    editor.on('fileUploadResponse', evt => {\n      this.ngZone.run(() => {\n        this.fileUploadResponse.emit(evt);\n      });\n    });\n    editor.on('blur', evt => {\n      this.ngZone.run(() => {\n        if (this.onTouched) {\n          this.onTouched();\n        }\n\n        this.blur.emit(evt);\n      });\n    });\n    editor.on('dataReady', this.propagateChange, this);\n\n    if (this.instance.undoManager) {\n      editor.on('change', this.propagateChange, this);\n    } // If 'undo' plugin is not loaded, listen to 'selectionCheck' event instead. (#54).\n    else {\n      editor.on('selectionCheck', this.propagateChange, this);\n    }\n  }\n\n  propagateChange(event) {\n    this.ngZone.run(() => {\n      const newData = this.instance.getData();\n\n      if (event.name === 'change') {\n        this.change.emit(event);\n      } else if (event.name === 'dataReady') {\n        this.dataReady.emit(event);\n      }\n\n      if (newData === this.data) {\n        return;\n      }\n\n      this._data = newData;\n      this.dataChange.emit(newData);\n\n      if (this.onChange) {\n        this.onChange(newData);\n      }\n    });\n  }\n\n}\n\nCKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n  return new (t || CKEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCKEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CKEditorComponent,\n  selectors: [[\"ckeditor\"]],\n  inputs: {\n    config: \"config\",\n    editorUrl: \"editorUrl\",\n    tagName: \"tagName\",\n    type: \"type\",\n    data: \"data\",\n    readOnly: \"readOnly\"\n  },\n  outputs: {\n    namespaceLoaded: \"namespaceLoaded\",\n    ready: \"ready\",\n    dataReady: \"dataReady\",\n    change: \"change\",\n    dataChange: \"dataChange\",\n    dragStart: \"dragStart\",\n    dragEnd: \"dragEnd\",\n    drop: \"drop\",\n    fileUploadResponse: \"fileUploadResponse\",\n    fileUploadRequest: \"fileUploadRequest\",\n    focus: \"focus\",\n    paste: \"paste\",\n    afterPaste: \"afterPaste\",\n    blur: \"blur\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CKEditorComponent),\n    multi: true\n  }])],\n  decls: 1,\n  vars: 0,\n  template: function CKEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CKEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ckeditor',\n      template: '<ng-template></ng-template>',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CKEditorComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    editorUrl: [{\n      type: Input\n    }],\n    tagName: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    readOnly: [{\n      type: Input\n    }],\n    namespaceLoaded: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }],\n    dataReady: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    dataChange: [{\n      type: Output\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }],\n    drop: [{\n      type: Output\n    }],\n    fileUploadResponse: [{\n      type: Output\n    }],\n    fileUploadRequest: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    paste: [{\n      type: Output\n    }],\n    afterPaste: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n\nclass CKEditorModule {}\n\nCKEditorModule.ɵfac = function CKEditorModule_Factory(t) {\n  return new (t || CKEditorModule)();\n};\n\nCKEditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CKEditorModule\n});\nCKEditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[FormsModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CKEditorModule, [{\n    type: NgModule,\n    args: [{\n      imports: [FormsModule, CommonModule],\n      declarations: [CKEditorComponent],\n      exports: [CKEditorComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CKEditorComponent, CKEditorModule };","map":{"version":3,"sources":["C:/Users/Sunil/Desktop/Angular 13/ang13/node_modules/ckeditor4-angular/fesm2015/ckeditor4-angular.mjs"],"names":["i0","EventEmitter","forwardRef","Component","Input","Output","NgModule","CommonModule","NG_VALUE_ACCESSOR","FormsModule","getEditorNamespace","CKEditorComponent","constructor","elementRef","ngZone","editorUrl","tagName","type","namespaceLoaded","ready","dataReady","change","dataChange","dragStart","dragEnd","drop","fileUploadResponse","fileUploadRequest","focus","paste","afterPaste","blur","_readOnly","_data","_destroyed","data","instance","setData","getData","readOnly","isReadOnly","setReadOnly","ngAfterViewInit","namespace","emit","then","runOutsideAngular","createEditor","bind","catch","window","console","error","ngOnDestroy","destroy","writeValue","value","registerOnChange","callback","onChange","registerOnTouched","onTouched","_a","_b","element","document","createElement","nativeElement","appendChild","userInstanceReadyCallback","config","on","instanceReady","defaultConfig","delayIfDetached","Object","assign","evt","editor","subscribe","undo","undoManager","lock","fire","unlock","run","CKEDITOR","inline","replace","propagateChange","event","newData","name","ɵfac","ElementRef","NgZone","ɵcmp","provide","useExisting","multi","args","selector","template","providers","CKEditorModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { getEditorNamespace } from 'ckeditor4-integrations-common';\n\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass CKEditorComponent {\n    constructor(elementRef, ngZone) {\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n        /**\n         * CKEditor 4 script url address. Script will be loaded only if CKEDITOR namespace is missing.\n         *\n         * Defaults to 'https://cdn.ckeditor.com/4.24.0-lts/standard-all/ckeditor.js'\n         */\n        this.editorUrl = 'https://cdn.ckeditor.com/4.24.0-lts/standard-all/ckeditor.js';\n        /**\n         * Tag name of the editor component.\n         *\n         * The default tag is `textarea`.\n         */\n        this.tagName = 'textarea';\n        /**\n         * The type of the editor interface.\n         *\n         * By default editor interface will be initialized as `classic` editor.\n         * You can also choose to create an editor with `inline` interface type instead.\n         *\n         * See https://ckeditor.com/docs/ckeditor4/latest/guide/dev_uitypes.html\n         * and https://ckeditor.com/docs/ckeditor4/latest/examples/fixedui.html\n         * to learn more.\n         */\n        this.type = \"classic\" /* CLASSIC */;\n        /**\n         * Fired when the CKEDITOR https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR.html namespace\n         * is loaded. It only triggers once, no matter how many CKEditor 4 components are initialised.\n         * Can be used for convenient changes in the namespace, e.g. for adding external plugins.\n         */\n        this.namespaceLoaded = new EventEmitter();\n        /**\n         * Fires when the editor is ready. It corresponds with the `editor#instanceReady`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-instanceReady\n         * event.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Fires when the editor data is loaded, e.g. after calling setData()\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData\n         * editor's method. It corresponds with the `editor#dataReady`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dataReady event.\n         */\n        this.dataReady = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. It corresponds with the `editor#change`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-change\n         * event. For performance reasons this event may be called even when data didn't really changed.\n         * Please note that this event will only be fired when `undo` plugin is loaded. If you need to\n         * listen for editor changes (e.g. for two-way data binding), use `dataChange` event instead.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. In contrast to `change` - only emits when\n         * data really changed thus can be successfully used with `[data]` and two way `[(data)]` binding.\n         *\n         * See more: https://angular.io/guide/template-syntax#two-way-binding---\n         */\n        this.dataChange = new EventEmitter();\n        /**\n         * Fires when the native dragStart event occurs. It corresponds with the `editor#dragstart`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragstart\n         * event.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * Fires when the native dragEnd event occurs. It corresponds with the `editor#dragend`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-dragend\n         * event.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * Fires when the native drop event occurs. It corresponds with the `editor#drop`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-drop\n         * event.\n         */\n        this.drop = new EventEmitter();\n        /**\n         * Fires when the file loader response is received. It corresponds with the `editor#fileUploadResponse`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadResponse\n         * event.\n         */\n        this.fileUploadResponse = new EventEmitter();\n        /**\n         * Fires when the file loader should send XHR. It corresponds with the `editor#fileUploadRequest`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-fileUploadRequest\n         * event.\n         */\n        this.fileUploadRequest = new EventEmitter();\n        /**\n         * Fires when the editing area of the editor is focused. It corresponds with the `editor#focus`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-focus\n         * event.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * Fires after the user initiated a paste action, but before the data is inserted.\n         * It corresponds with the `editor#paste`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-paste\n         * event.\n         */\n        this.paste = new EventEmitter();\n        /**\n         * Fires after the `paste` event if content was modified. It corresponds with the `editor#afterPaste`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-afterPaste\n         * event.\n         */\n        this.afterPaste = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor#blur`\n         * https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-blur\n         * event.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * If the component is read–only before the editor instance is created, it remembers that state,\n         * so the editor can become read–only once it is ready.\n         */\n        this._readOnly = null;\n        this._data = null;\n        this._destroyed = false;\n    }\n    /**\n     * Keeps track of the editor's data.\n     *\n     * It's also decorated as an input which is useful when not using the ngModel.\n     *\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n    set data(data) {\n        if (data === this._data) {\n            return;\n        }\n        if (this.instance) {\n            this.instance.setData(data);\n            // Data may be changed by ACF.\n            this._data = this.instance.getData();\n            return;\n        }\n        this._data = data;\n    }\n    get data() {\n        return this._data;\n    }\n    /**\n     * When set to `true`, the editor becomes read-only.\n     *\n     * See https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#property-readOnly\n     * to learn more.\n     */\n    set readOnly(isReadOnly) {\n        if (this.instance) {\n            this.instance.setReadOnly(isReadOnly);\n            return;\n        }\n        // Delay setting read-only state until editor initialization.\n        this._readOnly = isReadOnly;\n    }\n    get readOnly() {\n        if (this.instance) {\n            return this.instance.readOnly;\n        }\n        return this._readOnly;\n    }\n    ngAfterViewInit() {\n        getEditorNamespace(this.editorUrl, namespace => {\n            this.namespaceLoaded.emit(namespace);\n        }).then(() => {\n            // Check if component instance was destroyed before `ngAfterViewInit` call (#110).\n            // Here, `this.instance` is still not initialized and so additional flag is needed.\n            if (this._destroyed) {\n                return;\n            }\n            this.ngZone.runOutsideAngular(this.createEditor.bind(this));\n        }).catch(window.console.error);\n    }\n    ngOnDestroy() {\n        this._destroyed = true;\n        this.ngZone.runOutsideAngular(() => {\n            if (this.instance) {\n                this.instance.destroy();\n                this.instance = null;\n            }\n        });\n    }\n    writeValue(value) {\n        this.data = value;\n    }\n    registerOnChange(callback) {\n        this.onChange = callback;\n    }\n    registerOnTouched(callback) {\n        this.onTouched = callback;\n    }\n    createEditor() {\n        var _a, _b;\n        const element = document.createElement(this.tagName);\n        this.elementRef.nativeElement.appendChild(element);\n        const userInstanceReadyCallback = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.on) === null || _b === void 0 ? void 0 : _b.instanceReady;\n        const defaultConfig = {\n            delayIfDetached: true\n        };\n        const config = Object.assign(Object.assign({}, defaultConfig), this.config);\n        if (typeof config.on === 'undefined') {\n            config.on = {};\n        }\n        config.on.instanceReady = evt => {\n            const editor = evt.editor;\n            this.instance = editor;\n            // Read only state may change during instance initialization.\n            this.readOnly = this._readOnly !== null ? this._readOnly : this.instance.readOnly;\n            this.subscribe(this.instance);\n            const undo = editor.undoManager;\n            if (this.data !== null) {\n                undo && undo.lock();\n                editor.setData(this.data, { callback: () => {\n                        // Locking undoManager prevents 'change' event.\n                        // Trigger it manually to updated bound data.\n                        if (this.data !== editor.getData()) {\n                            undo ? editor.fire('change') : editor.fire('dataReady');\n                        }\n                        undo && undo.unlock();\n                        this.ngZone.run(() => {\n                            if (typeof userInstanceReadyCallback === 'function') {\n                                userInstanceReadyCallback(evt);\n                            }\n                            this.ready.emit(evt);\n                        });\n                    } });\n            }\n            else {\n                this.ngZone.run(() => {\n                    if (typeof userInstanceReadyCallback === 'function') {\n                        userInstanceReadyCallback(evt);\n                    }\n                    this.ready.emit(evt);\n                });\n            }\n        };\n        if (this.type === \"inline\" /* INLINE */) {\n            CKEDITOR.inline(element, config);\n        }\n        else {\n            CKEDITOR.replace(element, config);\n        }\n    }\n    subscribe(editor) {\n        editor.on('focus', evt => {\n            this.ngZone.run(() => {\n                this.focus.emit(evt);\n            });\n        });\n        editor.on('paste', evt => {\n            this.ngZone.run(() => {\n                this.paste.emit(evt);\n            });\n        });\n        editor.on('afterPaste', evt => {\n            this.ngZone.run(() => {\n                this.afterPaste.emit(evt);\n            });\n        });\n        editor.on('dragend', evt => {\n            this.ngZone.run(() => {\n                this.dragEnd.emit(evt);\n            });\n        });\n        editor.on('dragstart', evt => {\n            this.ngZone.run(() => {\n                this.dragStart.emit(evt);\n            });\n        });\n        editor.on('drop', evt => {\n            this.ngZone.run(() => {\n                this.drop.emit(evt);\n            });\n        });\n        editor.on('fileUploadRequest', evt => {\n            this.ngZone.run(() => {\n                this.fileUploadRequest.emit(evt);\n            });\n        });\n        editor.on('fileUploadResponse', evt => {\n            this.ngZone.run(() => {\n                this.fileUploadResponse.emit(evt);\n            });\n        });\n        editor.on('blur', evt => {\n            this.ngZone.run(() => {\n                if (this.onTouched) {\n                    this.onTouched();\n                }\n                this.blur.emit(evt);\n            });\n        });\n        editor.on('dataReady', this.propagateChange, this);\n        if (this.instance.undoManager) {\n            editor.on('change', this.propagateChange, this);\n        }\n        // If 'undo' plugin is not loaded, listen to 'selectionCheck' event instead. (#54).\n        else {\n            editor.on('selectionCheck', this.propagateChange, this);\n        }\n    }\n    propagateChange(event) {\n        this.ngZone.run(() => {\n            const newData = this.instance.getData();\n            if (event.name === 'change') {\n                this.change.emit(event);\n            }\n            else if (event.name === 'dataReady') {\n                this.dataReady.emit(event);\n            }\n            if (newData === this.data) {\n                return;\n            }\n            this._data = newData;\n            this.dataChange.emit(newData);\n            if (this.onChange) {\n                this.onChange(newData);\n            }\n        });\n    }\n}\nCKEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.4.0\", ngImport: i0, type: CKEditorComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nCKEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.4.0\", type: CKEditorComponent, selector: \"ckeditor\", inputs: { config: \"config\", editorUrl: \"editorUrl\", tagName: \"tagName\", type: \"type\", data: \"data\", readOnly: \"readOnly\" }, outputs: { namespaceLoaded: \"namespaceLoaded\", ready: \"ready\", dataReady: \"dataReady\", change: \"change\", dataChange: \"dataChange\", dragStart: \"dragStart\", dragEnd: \"dragEnd\", drop: \"drop\", fileUploadResponse: \"fileUploadResponse\", fileUploadRequest: \"fileUploadRequest\", focus: \"focus\", paste: \"paste\", afterPaste: \"afterPaste\", blur: \"blur\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => CKEditorComponent),\n            multi: true,\n        }\n    ], ngImport: i0, template: '<ng-template></ng-template>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.4.0\", ngImport: i0, type: CKEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ckeditor',\n                    template: '<ng-template></ng-template>',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => CKEditorComponent),\n                            multi: true,\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { config: [{\n                type: Input\n            }], editorUrl: [{\n                type: Input\n            }], tagName: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], namespaceLoaded: [{\n                type: Output\n            }], ready: [{\n                type: Output\n            }], dataReady: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], dataChange: [{\n                type: Output\n            }], dragStart: [{\n                type: Output\n            }], dragEnd: [{\n                type: Output\n            }], drop: [{\n                type: Output\n            }], fileUploadResponse: [{\n                type: Output\n            }], fileUploadRequest: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], paste: [{\n                type: Output\n            }], afterPaste: [{\n                type: Output\n            }], blur: [{\n                type: Output\n            }] } });\n\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass CKEditorModule {\n}\nCKEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.4.0\", ngImport: i0, type: CKEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCKEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.4.0\", ngImport: i0, type: CKEditorModule, declarations: [CKEditorComponent], imports: [FormsModule, CommonModule], exports: [CKEditorComponent] });\nCKEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.4.0\", ngImport: i0, type: CKEditorModule, imports: [[FormsModule, CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.4.0\", ngImport: i0, type: CKEditorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [FormsModule, CommonModule],\n                    declarations: [CKEditorComponent],\n                    exports: [CKEditorComponent]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorComponent, CKEditorModule };\n"]},"metadata":{},"sourceType":"module"}