{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport EditorWatchdog from '@ckeditor/ckeditor5-watchdog/src/editorwatchdog';\nimport { first } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n// A copy of @ckeditor/ckeditor5-utils/src/uid.js\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\n\nfunction CKEditorComponent_ng_template_0_Template(rf, ctx) {}\n\nconst HEX_NUMBERS = new Array(256).fill(0).map((val, index) => ('0' + index.toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\n\nfunction uid() {\n  // Let's create some positive random 32bit integers first.\n  //\n  // 1. Math.random() is a float between 0 and 1.\n  // 2. 0x100000000 is 2^32 = 4294967296.\n  // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n  //\n  // For instance:\n  //\t\tMath.random() * 0x100000000 = 3366450031.853859\n  // but\n  //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n  const r1 = Math.random() * 0x100000000 >>> 0;\n  const r2 = Math.random() * 0x100000000 >>> 0;\n  const r3 = Math.random() * 0x100000000 >>> 0;\n  const r4 = Math.random() * 0x100000000 >>> 0; // Make sure that id does not start with number.\n\n  return 'e' + HEX_NUMBERS[r1 >> 0 & 0xFF] + HEX_NUMBERS[r1 >> 8 & 0xFF] + HEX_NUMBERS[r1 >> 16 & 0xFF] + HEX_NUMBERS[r1 >> 24 & 0xFF] + HEX_NUMBERS[r2 >> 0 & 0xFF] + HEX_NUMBERS[r2 >> 8 & 0xFF] + HEX_NUMBERS[r2 >> 16 & 0xFF] + HEX_NUMBERS[r2 >> 24 & 0xFF] + HEX_NUMBERS[r3 >> 0 & 0xFF] + HEX_NUMBERS[r3 >> 8 & 0xFF] + HEX_NUMBERS[r3 >> 16 & 0xFF] + HEX_NUMBERS[r3 >> 24 & 0xFF] + HEX_NUMBERS[r4 >> 0 & 0xFF] + HEX_NUMBERS[r4 >> 8 & 0xFF] + HEX_NUMBERS[r4 >> 16 & 0xFF] + HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\n\nconst ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from Angular integration (@ckeditor/ckeditor5-angular)';\n\nclass CKEditorComponent {\n  constructor(elementRef, ngZone) {\n    /**\n     * The configuration of the editor.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n     * to learn more.\n     */\n    this.config = {};\n    /**\n     * The initial data of the editor. Useful when not using the ngModel.\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n\n    this.data = '';\n    /**\n     * Tag name of the editor component.\n     *\n     * The default tag is 'div'.\n     */\n\n    this.tagName = 'div';\n    /**\n     * Allows disabling the two-way data binding mechanism. Disabling it can boost performance for large documents.\n     *\n     * When a component is connected using the [(ngModel)] or [formControl] directives and this value is set to true then none of the data\n     * will ever be synchronized.\n     *\n     * An integrator must call `editor.getData()` manually once the application needs the editor's data.\n     * An editor instance can be received in the `ready()` callback.\n     */\n\n    this.disableTwoWayDataBinding = false;\n    /**\n     * Fires when the editor is ready. It corresponds with the `editor#ready`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n     * event.\n     */\n\n    this.ready = new EventEmitter();\n    /**\n     * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n     * event.\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n     * event.\n     */\n\n    this.blur = new EventEmitter();\n    /**\n     * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n     * event.\n     */\n\n    this.focus = new EventEmitter();\n    /**\n     * Fires when the editor component crashes.\n     */\n\n    this.error = new EventEmitter();\n    /**\n     * If the component is read–only before the editor instance is created, it remembers that state,\n     * so the editor can become read–only once it is ready.\n     */\n\n    this.initiallyDisabled = false;\n    /**\n     * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n     */\n\n    this.isEditorSettingData = false;\n    this.id = uid();\n    this.ngZone = ngZone;\n    this.elementRef = elementRef; // To avoid issues with the community typings and CKEditor 5, let's treat window as any. See #342.\n\n    const {\n      CKEDITOR_VERSION\n    } = window; // Starting from v34.0.0, CKEditor 5 introduces a lock mechanism enabling/disabling the read-only mode.\n    // As it is a breaking change between major releases of the integration, the component requires using\n    // CKEditor 5 in version 34 or higher.\n\n    if (CKEDITOR_VERSION) {\n      const [major] = CKEDITOR_VERSION.split('.').map(Number);\n\n      if (major < 34) {\n        console.warn('The <CKEditor> component requires using CKEditor 5 in version 34 or higher.');\n      }\n    } else {\n      console.warn('Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.');\n    }\n  }\n  /**\n   * When set `true`, the editor becomes read-only.\n   * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n   * to learn more.\n   */\n\n\n  set disabled(isDisabled) {\n    this.setDisabledState(isDisabled);\n  }\n\n  get disabled() {\n    if (this.editorInstance) {\n      return this.editorInstance.isReadOnly;\n    }\n\n    return this.initiallyDisabled;\n  }\n  /**\n   * The instance of the editor created by this component.\n   */\n\n\n  get editorInstance() {\n    let editorWatchdog = this.editorWatchdog;\n\n    if (this.watchdog) {\n      // Temporarily use the `_watchdogs` internal map as the `getItem()` method throws\n      // an error when the item is not registered yet.\n      // See https://github.com/ckeditor/ckeditor5-angular/issues/177.\n      editorWatchdog = this.watchdog._watchdogs.get(this.id);\n    }\n\n    if (editorWatchdog) {\n      return editorWatchdog.editor;\n    }\n\n    return null;\n  } // Implementing the OnChanges interface. Whenever the `data` property is changed, update the editor content.\n\n\n  ngOnChanges(changes) {\n    if (Object.prototype.hasOwnProperty.call(changes, 'data') && changes.data && !changes.data.isFirstChange()) {\n      this.writeValue(changes.data.currentValue);\n    }\n  } // Implementing the AfterViewInit interface.\n\n\n  ngAfterViewInit() {\n    this.attachToWatchdog();\n  } // Implementing the OnDestroy interface.\n\n\n  ngOnDestroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.watchdog) {\n        yield this.watchdog.remove(this.id);\n      } else if (this.editorWatchdog && this.editorWatchdog.editor) {\n        yield this.editorWatchdog.destroy();\n        this.editorWatchdog = undefined;\n      }\n    });\n  } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n\n  writeValue(value) {\n    // This method is called with the `null` value when the form resets.\n    // A component's responsibility is to restore to the initial state.\n    if (value === null) {\n      value = '';\n    } // If already initialized.\n\n\n    if (this.editorInstance) {\n      // The lock mechanism prevents from calling `cvaOnChange()` during changing\n      // the editor state. See #139\n      this.isEditorSettingData = true;\n      this.editorInstance.setData(value);\n      this.isEditorSettingData = false;\n    } // If not, wait for it to be ready; store the data.\n    else {\n      // If the editor element is already available, then update its content.\n      this.data = value; // If not, then wait until it is ready\n      // and change data only for the first `ready` event.\n\n      this.ready.pipe(first()).subscribe(editor => {\n        editor.setData(this.data);\n      });\n    }\n  } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n\n  registerOnChange(callback) {\n    this.cvaOnChange = callback;\n  } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n\n  registerOnTouched(callback) {\n    this.cvaOnTouched = callback;\n  } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n\n  setDisabledState(isDisabled) {\n    // If already initialized.\n    if (this.editorInstance) {\n      if (isDisabled) {\n        this.editorInstance.enableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n      } else {\n        this.editorInstance.disableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n      }\n    } // Store the state anyway to use it once the editor is created.\n\n\n    this.initiallyDisabled = isDisabled;\n  }\n  /**\n   * Creates the editor instance, sets initial editor data, then integrates\n   * the editor with the Angular component. This method does not use the `editor.setData()`\n   * because of the issue in the collaboration mode (#6).\n   */\n\n\n  attachToWatchdog() {\n    const creator = (element, config) => __awaiter(this, void 0, void 0, function* () {\n      return this.ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {\n        this.elementRef.nativeElement.appendChild(element);\n        const editor = yield this.editor.create(element, config);\n\n        if (this.initiallyDisabled) {\n          editor.enableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n        }\n\n        this.ngZone.run(() => {\n          this.ready.emit(editor);\n        });\n        this.setUpEditorEvents(editor);\n        return editor;\n      }));\n    });\n\n    const destructor = editor => __awaiter(this, void 0, void 0, function* () {\n      yield editor.destroy();\n      this.elementRef.nativeElement.removeChild(this.editorElement);\n    });\n\n    const emitError = () => {\n      this.ngZone.run(() => {\n        this.error.emit();\n      });\n    };\n\n    const element = document.createElement(this.tagName);\n    const config = this.getConfig();\n    this.editorElement = element; // Based on the presence of the watchdog decide how to initialize the editor.\n\n    if (this.watchdog) {\n      // When the context watchdog is passed add the new item to it based on the passed configuration.\n      this.watchdog.add({\n        id: this.id,\n        type: 'editor',\n        creator,\n        destructor,\n        sourceElementOrData: element,\n        config\n      });\n      this.watchdog.on('itemError', (_, {\n        itemId\n      }) => {\n        if (itemId === this.id) {\n          emitError();\n        }\n      });\n    } else {\n      // In the other case create the watchdog by hand to keep the editor running.\n      const editorWatchdog = new EditorWatchdog(this.editor, this.editorWatchdogConfig);\n      editorWatchdog.setCreator(creator);\n      editorWatchdog.setDestructor(destructor);\n      editorWatchdog.on('error', emitError);\n      this.editorWatchdog = editorWatchdog;\n      this.editorWatchdog.create(element, config);\n    }\n  }\n\n  getConfig() {\n    if (this.data && this.config.initialData) {\n      throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n    }\n\n    const config = Object.assign({}, this.config); // Merge two possible ways of providing data into the `config.initialData` field.\n\n    const initialData = this.config.initialData || this.data;\n\n    if (initialData) {\n      // Define the `config.initialData` only when the initial content is specified.\n      config.initialData = initialData;\n    }\n\n    return config;\n  }\n  /**\n   * Integrates the editor with the component by attaching related event listeners.\n   */\n\n\n  setUpEditorEvents(editor) {\n    const modelDocument = editor.model.document;\n    const viewDocument = editor.editing.view.document;\n    modelDocument.on('change:data', evt => {\n      this.ngZone.run(() => {\n        if (this.disableTwoWayDataBinding) {\n          return;\n        }\n\n        if (this.cvaOnChange && !this.isEditorSettingData) {\n          const data = editor.getData();\n          this.cvaOnChange(data);\n        }\n\n        this.change.emit({\n          event: evt,\n          editor\n        });\n      });\n    });\n    viewDocument.on('focus', evt => {\n      this.ngZone.run(() => {\n        this.focus.emit({\n          event: evt,\n          editor\n        });\n      });\n    });\n    viewDocument.on('blur', evt => {\n      this.ngZone.run(() => {\n        if (this.cvaOnTouched) {\n          this.cvaOnTouched();\n        }\n\n        this.blur.emit({\n          event: evt,\n          editor\n        });\n      });\n    });\n  }\n\n}\n\nCKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n  return new (t || CKEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nCKEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CKEditorComponent,\n  selectors: [[\"ckeditor\"]],\n  inputs: {\n    editor: \"editor\",\n    config: \"config\",\n    data: \"data\",\n    tagName: \"tagName\",\n    watchdog: \"watchdog\",\n    editorWatchdogConfig: \"editorWatchdogConfig\",\n    disableTwoWayDataBinding: \"disableTwoWayDataBinding\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    ready: \"ready\",\n    change: \"change\",\n    blur: \"blur\",\n    focus: \"focus\",\n    error: \"error\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => CKEditorComponent),\n    multi: true\n  }]), i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function CKEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CKEditorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ckeditor',\n      template: '<ng-template></ng-template>',\n      // Integration with @angular/forms.\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        useExisting: forwardRef(() => CKEditorComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    editor: [{\n      type: Input\n    }],\n    config: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    tagName: [{\n      type: Input\n    }],\n    watchdog: [{\n      type: Input\n    }],\n    editorWatchdogConfig: [{\n      type: Input\n    }],\n    disableTwoWayDataBinding: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    ready: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    blur: [{\n      type: Output\n    }],\n    focus: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n\nclass CKEditorModule {}\n\nCKEditorModule.ɵfac = function CKEditorModule_Factory(t) {\n  return new (t || CKEditorModule)();\n};\n\nCKEditorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CKEditorModule\n});\nCKEditorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[FormsModule, CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CKEditorModule, [{\n    type: NgModule,\n    args: [{\n      imports: [FormsModule, CommonModule],\n      declarations: [CKEditorComponent],\n      exports: [CKEditorComponent]\n    }]\n  }], null, null);\n})();\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CKEditorComponent, CKEditorModule };","map":{"version":3,"sources":["C:/Users/Sunil/Desktop/Angular 13/ang13/node_modules/@ckeditor/ckeditor5-angular/fesm2015/ckeditor-ckeditor5-angular.mjs"],"names":["__awaiter","i0","EventEmitter","forwardRef","Component","Input","Output","NgModule","EditorWatchdog","first","NG_VALUE_ACCESSOR","FormsModule","CommonModule","HEX_NUMBERS","Array","fill","map","val","index","toString","slice","uid","r1","Math","random","r2","r3","r4","ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID","CKEditorComponent","constructor","elementRef","ngZone","config","data","tagName","disableTwoWayDataBinding","ready","change","blur","focus","error","initiallyDisabled","isEditorSettingData","id","CKEDITOR_VERSION","window","major","split","Number","console","warn","disabled","isDisabled","setDisabledState","editorInstance","isReadOnly","editorWatchdog","watchdog","_watchdogs","get","editor","ngOnChanges","changes","Object","prototype","hasOwnProperty","call","isFirstChange","writeValue","currentValue","ngAfterViewInit","attachToWatchdog","ngOnDestroy","remove","destroy","undefined","value","setData","pipe","subscribe","registerOnChange","callback","cvaOnChange","registerOnTouched","cvaOnTouched","enableReadOnlyMode","disableReadOnlyMode","creator","element","runOutsideAngular","nativeElement","appendChild","create","run","emit","setUpEditorEvents","destructor","removeChild","editorElement","emitError","document","createElement","getConfig","add","type","sourceElementOrData","on","_","itemId","editorWatchdogConfig","setCreator","setDestructor","initialData","Error","assign","modelDocument","model","viewDocument","editing","view","evt","getData","event","ɵfac","ElementRef","NgZone","ɵcmp","provide","useExisting","multi","args","selector","template","providers","CKEditorModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport EditorWatchdog from '@ckeditor/ckeditor5-watchdog/src/editorwatchdog';\nimport { first } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n// A copy of @ckeditor/ckeditor5-utils/src/uid.js\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\nconst HEX_NUMBERS = new Array(256).fill(0)\n    .map((val, index) => ('0' + (index).toString(16)).slice(-2));\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\nfunction uid() {\n    // Let's create some positive random 32bit integers first.\n    //\n    // 1. Math.random() is a float between 0 and 1.\n    // 2. 0x100000000 is 2^32 = 4294967296.\n    // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n    //\n    // For instance:\n    //\t\tMath.random() * 0x100000000 = 3366450031.853859\n    // but\n    //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n    const r1 = Math.random() * 0x100000000 >>> 0;\n    const r2 = Math.random() * 0x100000000 >>> 0;\n    const r3 = Math.random() * 0x100000000 >>> 0;\n    const r4 = Math.random() * 0x100000000 >>> 0;\n    // Make sure that id does not start with number.\n    return 'e' +\n        HEX_NUMBERS[r1 >> 0 & 0xFF] +\n        HEX_NUMBERS[r1 >> 8 & 0xFF] +\n        HEX_NUMBERS[r1 >> 16 & 0xFF] +\n        HEX_NUMBERS[r1 >> 24 & 0xFF] +\n        HEX_NUMBERS[r2 >> 0 & 0xFF] +\n        HEX_NUMBERS[r2 >> 8 & 0xFF] +\n        HEX_NUMBERS[r2 >> 16 & 0xFF] +\n        HEX_NUMBERS[r2 >> 24 & 0xFF] +\n        HEX_NUMBERS[r3 >> 0 & 0xFF] +\n        HEX_NUMBERS[r3 >> 8 & 0xFF] +\n        HEX_NUMBERS[r3 >> 16 & 0xFF] +\n        HEX_NUMBERS[r3 >> 24 & 0xFF] +\n        HEX_NUMBERS[r4 >> 0 & 0xFF] +\n        HEX_NUMBERS[r4 >> 8 & 0xFF] +\n        HEX_NUMBERS[r4 >> 16 & 0xFF] +\n        HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\n\nconst ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID = 'Lock from Angular integration (@ckeditor/ckeditor5-angular)';\nclass CKEditorComponent {\n    constructor(elementRef, ngZone) {\n        /**\n         * The configuration of the editor.\n         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n         * to learn more.\n         */\n        this.config = {};\n        /**\n         * The initial data of the editor. Useful when not using the ngModel.\n         * See https://angular.io/api/forms/NgModel to learn more.\n         */\n        this.data = '';\n        /**\n         * Tag name of the editor component.\n         *\n         * The default tag is 'div'.\n         */\n        this.tagName = 'div';\n        /**\n         * Allows disabling the two-way data binding mechanism. Disabling it can boost performance for large documents.\n         *\n         * When a component is connected using the [(ngModel)] or [formControl] directives and this value is set to true then none of the data\n         * will ever be synchronized.\n         *\n         * An integrator must call `editor.getData()` manually once the application needs the editor's data.\n         * An editor instance can be received in the `ready()` callback.\n         */\n        this.disableTwoWayDataBinding = false;\n        /**\n         * Fires when the editor is ready. It corresponds with the `editor#ready`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n         * event.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n         * event.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n         * event.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n         * event.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * Fires when the editor component crashes.\n         */\n        this.error = new EventEmitter();\n        /**\n         * If the component is read–only before the editor instance is created, it remembers that state,\n         * so the editor can become read–only once it is ready.\n         */\n        this.initiallyDisabled = false;\n        /**\n         * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n         */\n        this.isEditorSettingData = false;\n        this.id = uid();\n        this.ngZone = ngZone;\n        this.elementRef = elementRef;\n        // To avoid issues with the community typings and CKEditor 5, let's treat window as any. See #342.\n        const { CKEDITOR_VERSION } = window;\n        // Starting from v34.0.0, CKEditor 5 introduces a lock mechanism enabling/disabling the read-only mode.\n        // As it is a breaking change between major releases of the integration, the component requires using\n        // CKEditor 5 in version 34 or higher.\n        if (CKEDITOR_VERSION) {\n            const [major] = CKEDITOR_VERSION.split('.').map(Number);\n            if (major < 34) {\n                console.warn('The <CKEditor> component requires using CKEditor 5 in version 34 or higher.');\n            }\n        }\n        else {\n            console.warn('Cannot find the \"CKEDITOR_VERSION\" in the \"window\" scope.');\n        }\n    }\n    /**\n     * When set `true`, the editor becomes read-only.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n     * to learn more.\n     */\n    set disabled(isDisabled) {\n        this.setDisabledState(isDisabled);\n    }\n    get disabled() {\n        if (this.editorInstance) {\n            return this.editorInstance.isReadOnly;\n        }\n        return this.initiallyDisabled;\n    }\n    /**\n     * The instance of the editor created by this component.\n     */\n    get editorInstance() {\n        let editorWatchdog = this.editorWatchdog;\n        if (this.watchdog) {\n            // Temporarily use the `_watchdogs` internal map as the `getItem()` method throws\n            // an error when the item is not registered yet.\n            // See https://github.com/ckeditor/ckeditor5-angular/issues/177.\n            editorWatchdog = this.watchdog._watchdogs.get(this.id);\n        }\n        if (editorWatchdog) {\n            return editorWatchdog.editor;\n        }\n        return null;\n    }\n    // Implementing the OnChanges interface. Whenever the `data` property is changed, update the editor content.\n    ngOnChanges(changes) {\n        if (Object.prototype.hasOwnProperty.call(changes, 'data') && changes.data && !changes.data.isFirstChange()) {\n            this.writeValue(changes.data.currentValue);\n        }\n    }\n    // Implementing the AfterViewInit interface.\n    ngAfterViewInit() {\n        this.attachToWatchdog();\n    }\n    // Implementing the OnDestroy interface.\n    ngOnDestroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.watchdog) {\n                yield this.watchdog.remove(this.id);\n            }\n            else if (this.editorWatchdog && this.editorWatchdog.editor) {\n                yield this.editorWatchdog.destroy();\n                this.editorWatchdog = undefined;\n            }\n        });\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    writeValue(value) {\n        // This method is called with the `null` value when the form resets.\n        // A component's responsibility is to restore to the initial state.\n        if (value === null) {\n            value = '';\n        }\n        // If already initialized.\n        if (this.editorInstance) {\n            // The lock mechanism prevents from calling `cvaOnChange()` during changing\n            // the editor state. See #139\n            this.isEditorSettingData = true;\n            this.editorInstance.setData(value);\n            this.isEditorSettingData = false;\n        }\n        // If not, wait for it to be ready; store the data.\n        else {\n            // If the editor element is already available, then update its content.\n            this.data = value;\n            // If not, then wait until it is ready\n            // and change data only for the first `ready` event.\n            this.ready\n                .pipe(first())\n                .subscribe((editor) => {\n                editor.setData(this.data);\n            });\n        }\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    registerOnChange(callback) {\n        this.cvaOnChange = callback;\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    registerOnTouched(callback) {\n        this.cvaOnTouched = callback;\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    setDisabledState(isDisabled) {\n        // If already initialized.\n        if (this.editorInstance) {\n            if (isDisabled) {\n                this.editorInstance.enableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n            }\n            else {\n                this.editorInstance.disableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n            }\n        }\n        // Store the state anyway to use it once the editor is created.\n        this.initiallyDisabled = isDisabled;\n    }\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     */\n    attachToWatchdog() {\n        const creator = (element, config) => __awaiter(this, void 0, void 0, function* () {\n            return this.ngZone.runOutsideAngular(() => __awaiter(this, void 0, void 0, function* () {\n                this.elementRef.nativeElement.appendChild(element);\n                const editor = yield this.editor.create(element, config);\n                if (this.initiallyDisabled) {\n                    editor.enableReadOnlyMode(ANGULAR_INTEGRATION_READ_ONLY_LOCK_ID);\n                }\n                this.ngZone.run(() => {\n                    this.ready.emit(editor);\n                });\n                this.setUpEditorEvents(editor);\n                return editor;\n            }));\n        });\n        const destructor = (editor) => __awaiter(this, void 0, void 0, function* () {\n            yield editor.destroy();\n            this.elementRef.nativeElement.removeChild(this.editorElement);\n        });\n        const emitError = () => {\n            this.ngZone.run(() => {\n                this.error.emit();\n            });\n        };\n        const element = document.createElement(this.tagName);\n        const config = this.getConfig();\n        this.editorElement = element;\n        // Based on the presence of the watchdog decide how to initialize the editor.\n        if (this.watchdog) {\n            // When the context watchdog is passed add the new item to it based on the passed configuration.\n            this.watchdog.add({\n                id: this.id,\n                type: 'editor',\n                creator,\n                destructor,\n                sourceElementOrData: element,\n                config\n            });\n            this.watchdog.on('itemError', (_, { itemId }) => {\n                if (itemId === this.id) {\n                    emitError();\n                }\n            });\n        }\n        else {\n            // In the other case create the watchdog by hand to keep the editor running.\n            const editorWatchdog = new EditorWatchdog(this.editor, this.editorWatchdogConfig);\n            editorWatchdog.setCreator(creator);\n            editorWatchdog.setDestructor(destructor);\n            editorWatchdog.on('error', emitError);\n            this.editorWatchdog = editorWatchdog;\n            this.editorWatchdog.create(element, config);\n        }\n    }\n    getConfig() {\n        if (this.data && this.config.initialData) {\n            throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n        }\n        const config = Object.assign({}, this.config);\n        // Merge two possible ways of providing data into the `config.initialData` field.\n        const initialData = this.config.initialData || this.data;\n        if (initialData) {\n            // Define the `config.initialData` only when the initial content is specified.\n            config.initialData = initialData;\n        }\n        return config;\n    }\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     */\n    setUpEditorEvents(editor) {\n        const modelDocument = editor.model.document;\n        const viewDocument = editor.editing.view.document;\n        modelDocument.on('change:data', (evt) => {\n            this.ngZone.run(() => {\n                if (this.disableTwoWayDataBinding) {\n                    return;\n                }\n                if (this.cvaOnChange && !this.isEditorSettingData) {\n                    const data = editor.getData();\n                    this.cvaOnChange(data);\n                }\n                this.change.emit({ event: evt, editor });\n            });\n        });\n        viewDocument.on('focus', (evt) => {\n            this.ngZone.run(() => {\n                this.focus.emit({ event: evt, editor });\n            });\n        });\n        viewDocument.on('blur', (evt) => {\n            this.ngZone.run(() => {\n                if (this.cvaOnTouched) {\n                    this.cvaOnTouched();\n                }\n                this.blur.emit({ event: evt, editor });\n            });\n        });\n    }\n}\nCKEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: CKEditorComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nCKEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.12\", type: CKEditorComponent, selector: \"ckeditor\", inputs: { editor: \"editor\", config: \"config\", data: \"data\", tagName: \"tagName\", watchdog: \"watchdog\", editorWatchdogConfig: \"editorWatchdogConfig\", disableTwoWayDataBinding: \"disableTwoWayDataBinding\", disabled: \"disabled\" }, outputs: { ready: \"ready\", change: \"change\", blur: \"blur\", focus: \"focus\", error: \"error\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            useExisting: forwardRef(() => CKEditorComponent),\n            multi: true\n        }\n    ], usesOnChanges: true, ngImport: i0, template: '<ng-template></ng-template>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: CKEditorComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ckeditor',\n                    template: '<ng-template></ng-template>',\n                    // Integration with @angular/forms.\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                            useExisting: forwardRef(() => CKEditorComponent),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { editor: [{\n                type: Input\n            }], config: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], tagName: [{\n                type: Input\n            }], watchdog: [{\n                type: Input\n            }], editorWatchdogConfig: [{\n                type: Input\n            }], disableTwoWayDataBinding: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], ready: [{\n                type: Output\n            }], change: [{\n                type: Output\n            }], blur: [{\n                type: Output\n            }], focus: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }] } });\n\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nclass CKEditorModule {\n}\nCKEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: CKEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCKEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: CKEditorModule, declarations: [CKEditorComponent], imports: [FormsModule, CommonModule], exports: [CKEditorComponent] });\nCKEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: CKEditorModule, imports: [[FormsModule, CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.12\", ngImport: i0, type: CKEditorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [FormsModule, CommonModule],\n                    declarations: [CKEditorComponent],\n                    exports: [CKEditorComponent]\n                }]\n        }] });\n\n/**\n * @license Copyright (c) 2003-2023, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CKEditorComponent, CKEditorModule };\n"]},"metadata":{},"sourceType":"module"}