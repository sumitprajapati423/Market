{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i2 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/clipboard';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, of, BehaviorSubject, Subject, EMPTY } from 'rxjs';\nimport { tap, delay, take, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/platform-browser';\nconst SHARE_BUTTONS_CONFIG = new InjectionToken('shareButtonsConfig');\n\nclass IShareButton {}\n\nvar SharerMethod = /*#__PURE__*/(() => {\n  (function (SharerMethod) {\n    SharerMethod[\"Anchor\"] = \"anchor\";\n    SharerMethod[\"Window\"] = \"window\";\n  })(SharerMethod || (SharerMethod = {}));\n\n  return SharerMethod;\n})();\n\n/**\n * Simple object check.\n */\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\n/**\n * Deep merge two objects.\n */\n\n\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n/** Returns a valid URL or falls back to current URL */\n\n\nfunction getValidUrl(url, fallbackUrl) {\n  if (url) {\n    const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n    if (r.test(url)) {\n      return url;\n    }\n\n    console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\n  }\n\n  return fallbackUrl;\n}\n\nfunction printPage() {\n  return new Observable(sub => document.defaultView.print());\n}\n\nfunction copyToClipboard({\n  params,\n  data,\n  clipboard,\n  updater\n}) {\n  return of(null).pipe(tap(() => {\n    clipboard.copy(params.url); // Disable copy button\n\n    updater.next({\n      icon: data.successIcon,\n      text: data.successText,\n      disabled: true\n    });\n  }), delay(data.delay), tap(() => updater.next({\n    icon: data.icon,\n    text: data.text,\n    disabled: false\n  })), take(1));\n} // Create message body that includes the sharing link used for Email, SMS and WhatsApp buttons\n\n\nconst linkInDescription = {\n  description: p => {\n    return p.description ? `${p.description}\\r\\n${p.url}` : p.url;\n  }\n};\nconst SHARE_BUTTONS = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    ariaLabel: 'Share on Facebook',\n    icon: ['fab', 'facebook-f'],\n    color: '#4267B2',\n    share: {\n      desktop: 'https://www.facebook.com/sharer/sharer.php?'\n    },\n    params: {\n      url: 'u'\n    }\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    ariaLabel: 'Share on Twitter',\n    icon: ['fab', 'twitter'],\n    color: '#00acee',\n    share: {\n      desktop: 'https://twitter.com/intent/tweet?'\n    },\n    params: {\n      url: 'url',\n      description: 'text',\n      tags: 'hashtags',\n      via: 'via'\n    }\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    ariaLabel: 'Share on LinkedIn',\n    icon: ['fab', 'linkedin-in'],\n    color: '#006fa6',\n    share: {\n      desktop: 'https://www.linkedin.com/shareArticle?'\n    },\n    params: {\n      url: 'url',\n      title: 'title',\n      description: 'summary'\n    }\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    ariaLabel: 'Share on Pinterest',\n    icon: ['fab', 'pinterest-p'],\n    color: '#BD091D',\n    share: {\n      desktop: 'https://pinterest.com/pin/create/button/?'\n    },\n    params: {\n      url: 'url',\n      description: 'description',\n      image: 'media'\n    }\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    ariaLabel: 'Share on Reddit',\n    icon: ['fab', 'reddit-alien'],\n    color: '#FF4006',\n    share: {\n      desktop: 'https://www.reddit.com/submit?'\n    },\n    params: {\n      url: 'url',\n      title: 'title'\n    }\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    ariaLabel: 'Share on Tumblr',\n    icon: ['fab', 'tumblr'],\n    color: '#36465D',\n    share: {\n      desktop: 'https://tumblr.com/widgets/share/tool?'\n    },\n    params: {\n      url: 'canonicalUrl',\n      description: 'caption',\n      tags: 'tags'\n    }\n  },\n  mix: {\n    type: 'mix',\n    text: 'Mix',\n    ariaLabel: 'Share on Mix',\n    icon: ['fab', 'mix'],\n    color: '#eb4924',\n    share: {\n      desktop: 'https://mix.com/add?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  viber: {\n    type: 'viber',\n    text: 'Viber',\n    ariaLabel: 'Share on Viber',\n    icon: ['fab', 'viber'],\n    color: '#665ca7',\n    share: {\n      android: 'viber://forward?',\n      ios: 'viber://forward?'\n    },\n    params: {\n      description: 'text'\n    },\n    paramsFunc: linkInDescription\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    ariaLabel: 'Share on VKontakte',\n    icon: ['fab', 'vk'],\n    color: '#4C75A3',\n    share: {\n      desktop: 'https://vk.com/share.php?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    ariaLabel: 'Share on Telegram',\n    icon: ['fab', 'telegram-plane'],\n    color: '#0088cc',\n    share: {\n      desktop: 'https://t.me/share/url?'\n    },\n    params: {\n      url: 'url',\n      description: 'text'\n    }\n  },\n  messenger: {\n    type: 'messenger',\n    text: 'Messenger',\n    ariaLabel: 'Share on Messenger',\n    icon: ['fab', 'facebook-messenger'],\n    color: '#0080FF',\n    share: {\n      android: 'fb-messenger://share/?',\n      ios: 'fb-messenger://share/?'\n    },\n    params: {\n      url: 'link'\n    }\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    ariaLabel: 'Share on WhatsApp',\n    icon: ['fab', 'whatsapp'],\n    color: '#25D366',\n    share: {\n      desktop: 'https://web.whatsapp.com/send?',\n      android: 'whatsapp://send?',\n      ios: 'https://api.whatsapp.com/send?'\n    },\n    params: {\n      description: 'text'\n    },\n    paramsFunc: linkInDescription\n  },\n  xing: {\n    type: 'xing',\n    text: 'Xing',\n    ariaLabel: 'Share on Xing',\n    icon: ['fab', 'xing'],\n    color: '#006567',\n    share: {\n      desktop: 'https://www.xing.com/spi/shares/new?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  line: {\n    type: 'line',\n    text: 'Line',\n    ariaLabel: 'Share on Line',\n    icon: ['fab', 'line'],\n    color: '#00b900',\n    share: {\n      desktop: 'https://social-plugins.line.me/lineit/share?'\n    },\n    params: {\n      url: 'url'\n    }\n  },\n  sms: {\n    type: 'sms',\n    text: 'SMS',\n    ariaLabel: 'Share link via SMS',\n    icon: ['fas', 'sms'],\n    color: '#20c16c',\n    share: {\n      desktop: 'sms:?',\n      ios: 'sms:&'\n    },\n    params: {\n      description: 'body'\n    },\n    paramsFunc: linkInDescription\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    ariaLabel: 'Share link via email',\n    icon: ['fas', 'envelope'],\n    color: '#FF961C',\n    share: {\n      desktop: 'mailto:?'\n    },\n    params: {\n      title: 'subject',\n      description: 'body'\n    },\n    paramsFunc: linkInDescription\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    ariaLabel: 'Print page',\n    icon: ['fas', 'print'],\n    color: '#765AA2',\n    func: printPage\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    ariaLabel: 'Copy link',\n    icon: ['fas', 'link'],\n    color: '#607D8B',\n    data: {\n      text: 'Copy link',\n      icon: ['fas', 'link'],\n      successText: 'Copied',\n      successIcon: ['fas', 'check'],\n      delay: 2000\n    },\n    func: copyToClipboard\n  }\n};\nlet ShareService = /*#__PURE__*/(() => {\n  class ShareService {\n    constructor(config, _document) {\n      this._document = _document;\n      /** Global config that applies on all share buttons in the app */\n\n      this.config = {\n        sharerMethod: SharerMethod.Anchor,\n        sharerTarget: '_blank',\n        windowObj: this._document.defaultView,\n        windowFuncName: 'open',\n        prop: SHARE_BUTTONS,\n        theme: 'default',\n        include: [],\n        exclude: [],\n        autoSetMeta: true,\n        windowWidth: 800,\n        windowHeight: 500,\n        moreButtonIcon: 'ellipsis-h',\n        lessButtonIcon: 'minus',\n        moreButtonAriaLabel: 'Show more share buttons',\n        lessButtonAriaLabel: 'Show less share buttons'\n      };\n      /** Stream that emits when config changes */\n\n      this.config$ = new BehaviorSubject(this.config);\n\n      if (config) {\n        this.setConfig(config);\n      }\n    }\n    /**\n     * Share buttons properties, used to get the text, color and icon of each button.\n     */\n\n\n    get prop() {\n      return this.config.prop;\n    }\n\n    get windowSize() {\n      return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;\n    }\n\n    setConfig(config) {\n      this.config = mergeDeep(this.config, config);\n      this.config$.next(this.config);\n    }\n\n    addButton(name, props) {\n      this.setConfig({\n        prop: {\n          [name]: props\n        }\n      });\n    }\n\n  }\n\n  ShareService.ɵfac = function ShareService_Factory(t) {\n    return new (t || ShareService)(i0.ɵɵinject(SHARE_BUTTONS_CONFIG, 8), i0.ɵɵinject(DOCUMENT));\n  };\n\n  ShareService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ShareService,\n    factory: ShareService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShareService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ShareDirective = /*#__PURE__*/(() => {\n  class ShareDirective {\n    constructor(_el, _meta, _platform, _clipboard, _share, _cd, _document) {\n      this._meta = _meta;\n      this._platform = _platform;\n      this._clipboard = _clipboard;\n      this._share = _share;\n      this._cd = _cd;\n      this._document = _document;\n      /** Stream that emits when button is destroyed */\n\n      this._destroyed = new Subject();\n      /** Stream that emit when share button need to be updated */\n\n      this._updater = new Subject();\n      /** Set meta tags from document head, useful when SEO is supported */\n\n      this.autoSetMeta = this._share.config.autoSetMeta;\n      /** Sharing link */\n\n      this.url = this._share.config.url;\n      /** Sets the title parameter */\n\n      this.title = this._share.config.title;\n      /** Sets the description parameter */\n\n      this.description = this._share.config.description;\n      /** Sets the image parameter for sharing on Pinterest */\n\n      this.image = this._share.config.image;\n      /** Sets the tags parameter for sharing on Twitter and Tumblr */\n\n      this.tags = this._share.config.tags;\n      /** Stream that emits when share dialog is opened */\n\n      this.opened = new EventEmitter();\n      /** Stream that emits when share dialog is closed */\n\n      this.closed = new EventEmitter();\n      this._el = _el.nativeElement;\n    }\n    /**\n     * Share the link\n     */\n\n\n    share() {\n      // Avoid SSR error\n      if (this._platform.isBrowser && this.shareButton) {\n        // Prepare sharer url params\n        const params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs(); // Prepare share button click\n\n        const click = this.shareButton.share ? this.open(params) : this.shareButton.func({\n          params,\n          data: this.shareButton.data,\n          clipboard: this._clipboard,\n          updater: this._updater\n        });\n        click.pipe(takeUntil(this._destroyed)).subscribe();\n      } else {\n        console.warn(`${this.text} button is not compatible on this Platform`);\n      }\n    }\n\n    ngOnInit() {\n      // This stream is mainly used to update the copy button text and icon when it is being clicked\n      this._updater.pipe(tap(data => {\n        this.icon = data.icon;\n        this.text = data.text;\n        this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';\n\n        this._cd.markForCheck();\n      }), takeUntil(this._destroyed)).subscribe();\n    }\n\n    ngOnChanges(changes) {\n      // Avoid SSR error\n      if (this._platform.isBrowser) {\n        // Create share button\n        if (this._shareButtonChanged(changes.shareButtonName)) {\n          this._createShareButton();\n        } // Prepare share url\n\n\n        if (this._urlChanged(changes.url)) {\n          this.url = getValidUrl(this.autoSetMeta ? this.url || this._getMetaTagContent('og:url') : this.url, this._document.defaultView.location.href);\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n\n    _createShareButton() {\n      const button = this._share.config.prop[this.shareButtonName];\n\n      if (button) {\n        // Set share button properties\n        this.shareButton = button; // Remove previous button class\n\n        this._el.classList.remove(`sb-${this._buttonClass}`); // Add new button class\n\n\n        this._el.classList.add(`sb-${this.shareButtonName}`); // Set button css color variable\n\n\n        this._el.style.setProperty('--button-color', this.shareButton.color); // Keep a copy of the class for future replacement\n\n\n        this._buttonClass = this.shareButtonName;\n        this.color = this.shareButton.color;\n        this.text = this.shareButton.text;\n        this.icon = this.shareButton.icon; // Set aria-label attribute\n\n        this._el.setAttribute('aria-label', button.ariaLabel);\n      } else {\n        console.error(`[ShareButtons]: The share button '${this.shareButtonName}' does not exist!`);\n      }\n    }\n    /**\n     * Get meta tag content\n     */\n\n\n    _getMetaTagContent(key) {\n      const metaUsingProperty = this._meta.getTag(`property=\"${key}\"`);\n\n      if (metaUsingProperty) {\n        return metaUsingProperty.getAttribute('content');\n      }\n\n      const metaUsingName = this._meta.getTag(`name=\"${key}\"`);\n\n      if (metaUsingName) {\n        return metaUsingName.getAttribute('content');\n      }\n    }\n\n    _shareButtonChanged(change) {\n      return change && (change.firstChange || change.previousValue !== change.currentValue);\n    }\n\n    _urlChanged(change) {\n      return !this.url || change && change.previousValue !== change.currentValue;\n    }\n    /**\n     * Get share params from meta tags first and fallback to user inputs\n     */\n\n\n    getParamsFromMetaTags() {\n      return {\n        url: this.url,\n        title: this.title || this._getMetaTagContent('og:title'),\n        description: this.description || this._getMetaTagContent('og:description'),\n        image: this.image || this._getMetaTagContent('og:image'),\n        via: this._share.config.twitterAccount,\n        tags: this.tags\n      };\n    }\n    /**\n     * Get share params from user inputs\n     */\n\n\n    getParamsFromInputs() {\n      return {\n        url: this.url,\n        title: this.title,\n        description: this.description,\n        image: this.image,\n        tags: this.tags,\n        via: this._share.config.twitterAccount\n      };\n    }\n\n    open(params) {\n      // Set sharer link based on user's device\n      let sharerLink;\n\n      if (this._platform.IOS && this.shareButton.share.ios) {\n        sharerLink = this.shareButton.share.ios;\n      } else if (this._platform.ANDROID && this.shareButton.share.android) {\n        sharerLink = this.shareButton.share.android;\n      } else {\n        sharerLink = this.shareButton.share.desktop;\n      }\n\n      if (sharerLink) {\n        // Set sharer link params\n        this._finalUrl = sharerLink + this._serializeParams(params); // Log the sharer link in debug mode\n\n        if (this._share.config.debug) {\n          console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);\n        } // Open the share window\n        // There are two methods available for opening the share window:\n        // 1. Using a real anchor\n        // 2. Using window.open\n\n\n        const sharerMethod = this.shareButton.method || this._share.config.sharerMethod;\n        const sharerTarget = this.shareButton.target || this._share.config.sharerTarget;\n\n        switch (sharerMethod) {\n          case SharerMethod.Anchor:\n            const linkElement = this._document.createElement('a'); // Make it open in a new tab/window (depends on user's browser configuration)\n\n\n            linkElement.setAttribute('target', sharerTarget); // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n\n            linkElement.setAttribute('rel', 'noopener noreferrer');\n            linkElement.href = this._finalUrl;\n            linkElement.click();\n            linkElement.remove();\n            break;\n\n          case SharerMethod.Window:\n            // Open link using Window object\n            const openWindow = this._share.config.windowObj[this._share.config.windowFuncName];\n            const popUpWindow = openWindow(this._finalUrl, sharerTarget, this._share.windowSize); // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c\n\n            this._share.config.windowObj.opener = null; // Resolve when share dialog is closed\n\n            if (popUpWindow) {\n              return new Observable(sub => {\n                const pollTimer = this._document.defaultView.setInterval(() => {\n                  if (popUpWindow.closed) {\n                    this._document.defaultView.clearInterval(pollTimer); // Emit when share windows is closed\n\n\n                    this.closed.emit(this.shareButtonName);\n                    sub.next();\n                    sub.complete();\n                  }\n                }, 200);\n              });\n            }\n\n            break;\n        } // Emit when share window is opened\n\n\n        this.opened.emit(this.shareButtonName);\n      }\n\n      return EMPTY;\n    }\n\n    _serializeParams(params) {\n      return Object.entries(this.shareButton.params).map(([key, value]) => {\n        // Check if share button param has a map function\n        const paramFunc = this.shareButton.paramsFunc ? this.shareButton.paramsFunc[key] : null;\n\n        if (params[key] || paramFunc) {\n          const paramValue = paramFunc ? paramFunc(params) : params[key];\n          return `${value}=${encodeURIComponent(paramValue)}`;\n        }\n\n        return '';\n      }).filter(urlParam => urlParam !== '').join('&');\n    }\n\n  }\n\n  ShareDirective.ɵfac = function ShareDirective_Factory(t) {\n    return new (t || ShareDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Meta), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i3.Clipboard), i0.ɵɵdirectiveInject(ShareService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  ShareDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ShareDirective,\n    selectors: [[\"\", \"shareButton\", \"\"]],\n    hostBindings: function ShareDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ShareDirective_click_HostBindingHandler() {\n          return ctx.share();\n        });\n      }\n    },\n    inputs: {\n      shareButtonName: [\"shareButton\", \"shareButtonName\"],\n      autoSetMeta: \"autoSetMeta\",\n      url: \"url\",\n      title: \"title\",\n      description: \"description\",\n      image: \"image\",\n      tags: \"tags\"\n    },\n    outputs: {\n      opened: \"opened\",\n      closed: \"closed\"\n    },\n    exportAs: [\"shareButton\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return ShareDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ShareModule = /*#__PURE__*/(() => {\n  class ShareModule {\n    static withConfig(config) {\n      return {\n        ngModule: ShareModule,\n        providers: [{\n          provide: SHARE_BUTTONS_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  ShareModule.ɵfac = function ShareModule_Factory(t) {\n    return new (t || ShareModule)();\n  };\n\n  ShareModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ShareModule\n  });\n  ShareModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[PlatformModule, ClipboardModule]]\n  });\n  return ShareModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { IShareButton, SHARE_BUTTONS, SHARE_BUTTONS_CONFIG, ShareDirective, ShareModule, ShareService, SharerMethod }; //# sourceMappingURL=ngx-sharebuttons.mjs.map","map":null,"metadata":{},"sourceType":"module"}